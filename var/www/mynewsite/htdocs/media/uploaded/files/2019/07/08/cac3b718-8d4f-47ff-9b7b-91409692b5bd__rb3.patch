diff --git a/.buckconfig b/.buckconfig
new file mode 100644
index 0000000000000000000000000000000000000000..934256cb29d4a3616c740861c6af35ff6a165917
--- /dev/null
+++ b/.buckconfig
@@ -0,0 +1,6 @@
+
+[android]
+  target = Google Inc.:Google APIs:23
+
+[maven_repositories]
+  central = https://repo1.maven.org/maven2
diff --git a/.flowconfig b/.flowconfig
new file mode 100644
index 0000000000000000000000000000000000000000..47d80d95414d6101e6f5d25158712660084044d3
--- /dev/null
+++ b/.flowconfig
@@ -0,0 +1,69 @@
+[ignore]
+; We fork some components by platform
+.*/*[.]android.js
+
+; Ignore "BUCK" generated dirs
+<PROJECT_ROOT>/\.buckd/
+
+; Ignore unexpected extra "@providesModule"
+.*/node_modules/.*/node_modules/fbjs/.*
+
+; Ignore duplicate module providers
+; For RN Apps installed via npm, "Libraries" folder is inside
+; "node_modules/react-native" but in the source repo it is in the root
+.*/Libraries/react-native/React.js
+
+; Ignore polyfills
+.*/Libraries/polyfills/.*
+
+; Ignore metro
+.*/node_modules/metro/.*
+
+[include]
+
+[libs]
+node_modules/react-native/Libraries/react-native/react-native-interface.js
+node_modules/react-native/flow/
+
+[options]
+emoji=true
+
+esproposal.optional_chaining=enable
+esproposal.nullish_coalescing=enable
+
+module.system=haste
+module.system.haste.use_name_reducers=true
+# get basename
+module.system.haste.name_reducers='^.*/\([a-zA-Z0-9$_.-]+\.js\(\.flow\)?\)$' -> '\1'
+# strip .js or .js.flow suffix
+module.system.haste.name_reducers='^\(.*\)\.js\(\.flow\)?$' -> '\1'
+# strip .ios suffix
+module.system.haste.name_reducers='^\(.*\)\.ios$' -> '\1'
+module.system.haste.name_reducers='^\(.*\)\.android$' -> '\1'
+module.system.haste.name_reducers='^\(.*\)\.native$' -> '\1'
+module.system.haste.paths.blacklist=.*/__tests__/.*
+module.system.haste.paths.blacklist=.*/__mocks__/.*
+module.system.haste.paths.blacklist=<PROJECT_ROOT>/node_modules/react-native/Libraries/Animated/src/polyfills/.*
+module.system.haste.paths.whitelist=<PROJECT_ROOT>/node_modules/react-native/Libraries/.*
+
+munge_underscores=true
+
+module.name_mapper='^[./a-zA-Z0-9$_-]+\.\(bmp\|gif\|jpg\|jpeg\|png\|psd\|svg\|webp\|m4v\|mov\|mp4\|mpeg\|mpg\|webm\|aac\|aiff\|caf\|m4a\|mp3\|wav\|html\|pdf\)$' -> 'RelativeImageStub'
+
+module.file_ext=.js
+module.file_ext=.jsx
+module.file_ext=.json
+module.file_ext=.native.js
+
+suppress_type=$FlowIssue
+suppress_type=$FlowFixMe
+suppress_type=$FlowFixMeProps
+suppress_type=$FlowFixMeState
+
+suppress_comment=\\(.\\|\n\\)*\\$FlowFixMe\\($\\|[^(]\\|(\\(<VERSION>\\)? *\\(site=[a-z,_]*react_native[a-z,_]*\\)?)\\)
+suppress_comment=\\(.\\|\n\\)*\\$FlowIssue\\((\\(<VERSION>\\)? *\\(site=[a-z,_]*react_native[a-z,_]*\\)?)\\)?:? #[0-9]+
+suppress_comment=\\(.\\|\n\\)*\\$FlowFixedInNextDeploy
+suppress_comment=\\(.\\|\n\\)*\\$FlowExpectedError
+
+[version]
+^0.92.0
diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 0000000000000000000000000000000000000000..d42ff18354df611a7cd2c52f852e9afc579bb194
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1 @@
+*.pbxproj -text
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..5d647565fa9ef7171c321936f78dcb91257b5aa6
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,56 @@
+# OSX
+#
+.DS_Store
+
+# Xcode
+#
+build/
+*.pbxuser
+!default.pbxuser
+*.mode1v3
+!default.mode1v3
+*.mode2v3
+!default.mode2v3
+*.perspectivev3
+!default.perspectivev3
+xcuserdata
+*.xccheckout
+*.moved-aside
+DerivedData
+*.hmap
+*.ipa
+*.xcuserstate
+project.xcworkspace
+
+# Android/IntelliJ
+#
+build/
+.idea
+.gradle
+local.properties
+*.iml
+
+# node.js
+#
+node_modules/
+npm-debug.log
+yarn-error.log
+
+# BUCK
+buck-out/
+\.buckd/
+*.keystore
+
+# fastlane
+#
+# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the
+# screenshots whenever they are needed.
+# For more information about the recommended setup visit:
+# https://docs.fastlane.tools/best-practices/source-control/
+
+*/fastlane/report.xml
+*/fastlane/Preview.html
+*/fastlane/screenshots
+
+# Bundle artifact
+*.jsbundle
diff --git a/.watchmanconfig b/.watchmanconfig
new file mode 100644
index 0000000000000000000000000000000000000000..9e26dfeeb6e641a33dae4961196235bdb965b21b
--- /dev/null
+++ b/.watchmanconfig
@@ -0,0 +1 @@
+{}
\ No newline at end of file
diff --git a/App.js b/App.js
new file mode 100644
index 0000000000000000000000000000000000000000..293c144ca29d282d16c4c59f363869f2e940b261
--- /dev/null
+++ b/App.js
@@ -0,0 +1,22 @@
+import React, {Component} from 'react';
+
+import Navigator from './src/components/Navigator';
+
+// import GlobalFont from 'react-native-global-font'
+
+type Props = {};
+export default class App extends Component<Props> {
+  static navigationOptions = {
+       header: null,
+    };
+// componentDidMount() 
+//   {
+//      let fontName = 'Lato'
+//      GlobalFont.applyGlobal(fontName)
+//   } 
+  
+  render() {
+    return <Navigator />;
+  }
+}
+
diff --git a/__tests__/App-test.js b/__tests__/App-test.js
new file mode 100644
index 0000000000000000000000000000000000000000..178476699b605584dc503e85537c47dac8b7b611
--- /dev/null
+++ b/__tests__/App-test.js
@@ -0,0 +1,14 @@
+/**
+ * @format
+ */
+
+import 'react-native';
+import React from 'react';
+import App from '../App';
+
+// Note: test renderer must be required after react-native.
+import renderer from 'react-test-renderer';
+
+it('renders correctly', () => {
+  renderer.create(<App />);
+});
diff --git a/android/app/BUCK b/android/app/BUCK
new file mode 100644
index 0000000000000000000000000000000000000000..b15f7533f2842210937231c61258e77fb6825914
--- /dev/null
+++ b/android/app/BUCK
@@ -0,0 +1,55 @@
+# To learn about Buck see [Docs](https://buckbuild.com/).
+# To run your application with Buck:
+# - install Buck
+# - `npm start` - to start the packager
+# - `cd android`
+# - `keytool -genkey -v -keystore keystores/debug.keystore -storepass android -alias androiddebugkey -keypass android -dname "CN=Android Debug,O=Android,C=US"`
+# - `./gradlew :app:copyDownloadableDepsToLibs` - make all Gradle compile dependencies available to Buck
+# - `buck install -r android/app` - compile, install and run application
+#
+
+load(":build_defs.bzl", "create_aar_targets", "create_jar_targets")
+
+lib_deps = []
+
+create_aar_targets(glob(["libs/*.aar"]))
+
+create_jar_targets(glob(["libs/*.jar"]))
+
+android_library(
+    name = "all-libs",
+    exported_deps = lib_deps,
+)
+
+android_library(
+    name = "app-code",
+    srcs = glob([
+        "src/main/java/**/*.java",
+    ]),
+    deps = [
+        ":all-libs",
+        ":build_config",
+        ":res",
+    ],
+)
+
+android_build_config(
+    name = "build_config",
+    package = "com.playard",
+)
+
+android_resource(
+    name = "res",
+    package = "com.playard",
+    res = "src/main/res",
+)
+
+android_binary(
+    name = "app",
+    keystore = "//android/keystores:debug",
+    manifest = "src/main/AndroidManifest.xml",
+    package_type = "debug",
+    deps = [
+        ":app-code",
+    ],
+)
diff --git a/android/app/build.gradle b/android/app/build.gradle
new file mode 100644
index 0000000000000000000000000000000000000000..9fe35176e6bebac4549bd7f8a279466d934160de
--- /dev/null
+++ b/android/app/build.gradle
@@ -0,0 +1,166 @@
+apply plugin: "com.android.application"
+
+import com.android.build.OutputFile
+
+/**
+ * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
+ * and bundleReleaseJsAndAssets).
+ * These basically call `react-native bundle` with the correct arguments during the Android build
+ * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
+ * bundle directly from the development server. Below you can see all the possible configurations
+ * and their defaults. If you decide to add a configuration block, make sure to add it before the
+ * `apply from: "../../node_modules/react-native/react.gradle"` line.
+ *
+ * project.ext.react = [
+ *   // the name of the generated asset file containing your JS bundle
+ *   bundleAssetName: "index.android.bundle",
+ *
+ *   // the entry file for bundle generation
+ *   entryFile: "index.android.js",
+ *
+ *   // whether to bundle JS and assets in debug mode
+ *   bundleInDebug: false,
+ *
+ *   // whether to bundle JS and assets in release mode
+ *   bundleInRelease: true,
+ *
+ *   // whether to bundle JS and assets in another build variant (if configured).
+ *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
+ *   // The configuration property can be in the following formats
+ *   //         'bundleIn${productFlavor}${buildType}'
+ *   //         'bundleIn${buildType}'
+ *   // bundleInFreeDebug: true,
+ *   // bundleInPaidRelease: true,
+ *   // bundleInBeta: true,
+ *
+ *   // whether to disable dev mode in custom build variants (by default only disabled in release)
+ *   // for example: to disable dev mode in the staging build type (if configured)
+ *   devDisabledInStaging: true,
+ *   // The configuration property can be in the following formats
+ *   //         'devDisabledIn${productFlavor}${buildType}'
+ *   //         'devDisabledIn${buildType}'
+ *
+ *   // the root of your project, i.e. where "package.json" lives
+ *   root: "../../",
+ *
+ *   // where to put the JS bundle asset in debug mode
+ *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
+ *
+ *   // where to put the JS bundle asset in release mode
+ *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
+ *
+ *   // where to put drawable resources / React Native assets, e.g. the ones you use via
+ *   // require('./image.png')), in debug mode
+ *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
+ *
+ *   // where to put drawable resources / React Native assets, e.g. the ones you use via
+ *   // require('./image.png')), in release mode
+ *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
+ *
+ *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
+ *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
+ *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
+ *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
+ *   // for example, you might want to remove it from here.
+ *   inputExcludes: ["android/**", "ios/**"],
+ *
+ *   // override which node gets called and with what additional arguments
+ *   nodeExecutableAndArgs: ["node"],
+ *
+ *   // supply additional arguments to the packager
+ *   extraPackagerArgs: []
+ * ]
+ */
+
+project.ext.react = [
+    entryFile: "index.js"
+]
+
+apply from: "../../node_modules/react-native/react.gradle"
+
+/**
+ * Set this to true to create two separate APKs instead of one:
+ *   - An APK that only works on ARM devices
+ *   - An APK that only works on x86 devices
+ * The advantage is the size of the APK is reduced by about 4MB.
+ * Upload all the APKs to the Play Store and people will download
+ * the correct one based on the CPU architecture of their device.
+ */
+def enableSeparateBuildPerCPUArchitecture = false
+
+/**
+ * Run Proguard to shrink the Java bytecode in release builds.
+ */
+def enableProguardInReleaseBuilds = false
+
+android {
+    compileSdkVersion rootProject.ext.compileSdkVersion
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+
+    defaultConfig {
+        applicationId "com.playard"
+        minSdkVersion rootProject.ext.minSdkVersion
+        targetSdkVersion rootProject.ext.targetSdkVersion
+        versionCode 1
+        versionName "1.0"
+    }
+    signingConfigs {
+        release {
+            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
+                storeFile file(MYAPP_RELEASE_STORE_FILE)
+                storePassword MYAPP_RELEASE_STORE_PASSWORD
+                keyAlias MYAPP_RELEASE_KEY_ALIAS
+                keyPassword MYAPP_RELEASE_KEY_PASSWORD
+            }
+        }
+    }
+    splits {
+        abi {
+            reset()
+            enable enableSeparateBuildPerCPUArchitecture
+            universalApk false  // If true, also generate a universal APK
+            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
+        }
+    }
+    buildTypes {
+        release {
+            minifyEnabled enableProguardInReleaseBuilds
+            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
+            signingConfig signingConfigs.release
+        }
+    }
+    // applicationVariants are e.g. debug, release
+    applicationVariants.all { variant ->
+        variant.outputs.each { output ->
+            // For each separate APK per architecture, set a unique version code as described here:
+            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
+            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
+            def abi = output.getFilter(OutputFile.ABI)
+            if (abi != null) {  // null for the universal-debug, universal-release variants
+                output.versionCodeOverride =
+                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
+            }
+        }
+    }
+}
+
+dependencies {
+    implementation project(':@react-native-community_async-storage')
+    implementation project(':react-native-google-signin')
+    implementation project(':react-native-vector-icons')
+    implementation project(':react-native-gesture-handler')
+    implementation fileTree(dir: "libs", include: ["*.jar"])
+    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
+    implementation "com.facebook.react:react-native:+"  // From node_modules
+}
+
+// Run this once to be able to run the application with BUCK
+// puts all compile dependencies into folder libs for BUCK to use
+task copyDownloadableDepsToLibs(type: Copy) {
+    from configurations.compile
+    into 'libs'
+}
diff --git a/android/app/build_defs.bzl b/android/app/build_defs.bzl
new file mode 100644
index 0000000000000000000000000000000000000000..fff270f8d1d48432e85353a715d7ebad229b6d94
--- /dev/null
+++ b/android/app/build_defs.bzl
@@ -0,0 +1,19 @@
+"""Helper definitions to glob .aar and .jar targets"""
+
+def create_aar_targets(aarfiles):
+    for aarfile in aarfiles:
+        name = "aars__" + aarfile[aarfile.rindex("/") + 1:aarfile.rindex(".aar")]
+        lib_deps.append(":" + name)
+        android_prebuilt_aar(
+            name = name,
+            aar = aarfile,
+        )
+
+def create_jar_targets(jarfiles):
+    for jarfile in jarfiles:
+        name = "jars__" + jarfile[jarfile.rindex("/") + 1:jarfile.rindex(".jar")]
+        lib_deps.append(":" + name)
+        prebuilt_jar(
+            name = name,
+            binary_jar = jarfile,
+        )
diff --git a/android/app/proguard-rules.pro b/android/app/proguard-rules.pro
new file mode 100644
index 0000000000000000000000000000000000000000..a92fa177ee49f08bb6b1618922285afdbe89ca59
--- /dev/null
+++ b/android/app/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /usr/local/Cellar/android-sdk/24.3.3/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/android/app/src/debug/AndroidManifest.xml b/android/app/src/debug/AndroidManifest.xml
new file mode 100644
index 0000000000000000000000000000000000000000..fa26aa56e1c144b7368b89b23cb5d00ba18d4dda
--- /dev/null
+++ b/android/app/src/debug/AndroidManifest.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
+
+    <application android:usesCleartextTraffic="true" tools:targetApi="28" tools:ignore="GoogleAppIndexingWarning" />
+</manifest>
diff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000000000000000000000000000000000..8282861a0791ed1ebc6fa4e887d9960dca18e072
--- /dev/null
+++ b/android/app/src/main/AndroidManifest.xml
@@ -0,0 +1,27 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+  package="com.playard">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+
+
+    <application
+      android:name=".MainApplication"
+      android:label="@string/app_name"
+      android:icon="@mipmap/ic_launcher"
+      android:roundIcon="@mipmap/ic_launcher_round"
+      android:allowBackup="false"
+      android:theme="@style/AppTheme">
+      <activity
+        android:name=".MainActivity"
+        android:label="@string/app_name"
+        android:configChanges="keyboard|keyboardHidden|orientation|screenSize"
+        android:windowSoftInputMode="adjustNothing">
+        <intent-filter>
+            <action android:name="android.intent.action.MAIN" />
+            <category android:name="android.intent.category.LAUNCHER" />
+        </intent-filter>
+      </activity>
+      <activity android:name="com.facebook.react.devsupport.DevSettingsActivity" />
+    </application>
+
+</manifest>
diff --git a/android/app/src/main/java/com/playard/MainActivity.java b/android/app/src/main/java/com/playard/MainActivity.java
new file mode 100644
index 0000000000000000000000000000000000000000..61880235b8dbb16e97ae8952ba880af87f2e2e36
--- /dev/null
+++ b/android/app/src/main/java/com/playard/MainActivity.java
@@ -0,0 +1,15 @@
+package com.playard;
+
+import com.facebook.react.ReactActivity;
+
+public class MainActivity extends ReactActivity {
+
+    /**
+     * Returns the name of the main component registered from JavaScript.
+     * This is used to schedule rendering of the component.
+     */
+    @Override
+    protected String getMainComponentName() {
+        return "Playard";
+    }
+}
diff --git a/android/app/src/main/java/com/playard/MainApplication.java b/android/app/src/main/java/com/playard/MainApplication.java
new file mode 100644
index 0000000000000000000000000000000000000000..2ae113a42c3e53939607998589f3f557c2ea6323
--- /dev/null
+++ b/android/app/src/main/java/com/playard/MainApplication.java
@@ -0,0 +1,53 @@
+package com.playard;
+
+import android.app.Application;
+
+import com.facebook.react.ReactApplication;
+import com.reactnativecommunity.asyncstorage.AsyncStoragePackage;
+import co.apptailor.googlesignin.RNGoogleSigninPackage;
+import com.oblador.vectoricons.VectorIconsPackage;
+import com.swmansion.gesturehandler.react.RNGestureHandlerPackage;
+import com.facebook.react.ReactNativeHost;
+import com.facebook.react.ReactPackage;
+import com.facebook.react.shell.MainReactPackage;
+import com.facebook.soloader.SoLoader;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class MainApplication extends Application implements ReactApplication {
+
+  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {
+    @Override
+    public boolean getUseDeveloperSupport() {
+      return BuildConfig.DEBUG;
+    }
+
+    @Override
+    protected List<ReactPackage> getPackages() {
+      return Arrays.<ReactPackage>asList(
+          new MainReactPackage(),
+            new AsyncStoragePackage(),
+            new RNGoogleSigninPackage(),
+            new VectorIconsPackage(),
+            new RNGestureHandlerPackage()
+      );
+    }
+
+    @Override
+    protected String getJSMainModuleName() {
+      return "index";
+    }
+  };
+
+  @Override
+  public ReactNativeHost getReactNativeHost() {
+    return mReactNativeHost;
+  }
+
+  @Override
+  public void onCreate() {
+    super.onCreate();
+    SoLoader.init(this, /* native exopackage */ false);
+  }
+}
diff --git a/android/app/src/main/res/values/strings.xml b/android/app/src/main/res/values/strings.xml
new file mode 100644
index 0000000000000000000000000000000000000000..29bfb23f984af84ce244a5a6d92f13f17fc1a80b
--- /dev/null
+++ b/android/app/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">Playard</string>
+</resources>
diff --git a/android/app/src/main/res/values/styles.xml b/android/app/src/main/res/values/styles.xml
new file mode 100644
index 0000000000000000000000000000000000000000..319eb0ca100b5aae62b669a5f375ec234aabe351
--- /dev/null
+++ b/android/app/src/main/res/values/styles.xml
@@ -0,0 +1,8 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
+        <!-- Customize your theme here. -->
+    </style>
+
+</resources>
diff --git a/android/build.gradle b/android/build.gradle
new file mode 100644
index 0000000000000000000000000000000000000000..c6e7c7c0ab72bc0dd6f8ed03c7f36af62891ba31
--- /dev/null
+++ b/android/build.gradle
@@ -0,0 +1,33 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+
+buildscript {
+    ext {
+        buildToolsVersion = "28.0.3"
+        minSdkVersion = 16
+        compileSdkVersion = 28
+        targetSdkVersion = 28
+        supportLibVersion = "28.0.0"
+    }
+    repositories {
+        google()
+        jcenter()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:3.3.1'
+
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
+    }
+}
+
+allprojects {
+    repositories {
+        mavenLocal()
+        google()
+        jcenter()
+        maven {
+            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
+            url "$rootDir/../node_modules/react-native/android"
+        }
+    }
+}
diff --git a/android/gradle.properties b/android/gradle.properties
new file mode 100644
index 0000000000000000000000000000000000000000..ce21cbbed7b12b6036b80b245c5f523e2b9ff226
--- /dev/null
+++ b/android/gradle.properties
@@ -0,0 +1,23 @@
+# Project-wide Gradle settings.
+
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+
+MYAPP_RELEASE_STORE_FILE=my-release-key.keystore
+MYAPP_RELEASE_KEY_ALIAS=my-key-alias
+MYAPP_RELEASE_STORE_PASSWORD=manikumar
+MYAPP_RELEASE_KEY_PASSWORD=manikumar
\ No newline at end of file
diff --git a/android/gradle/wrapper/gradle-wrapper.properties b/android/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000000000000000000000000000000000000..019065d1d650ce87992f9d60b7a162f7f2f8caf9
--- /dev/null
+++ b/android/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.10.2-all.zip
diff --git a/android/gradlew b/android/gradlew
new file mode 100644
index 0000000000000000000000000000000000000000..cccdd3d517fc5249beaefa600691cf150f2fa3e6
--- /dev/null
+++ b/android/gradlew
@@ -0,0 +1,172 @@
+#!/usr/bin/env sh
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/android/gradlew.bat b/android/gradlew.bat
new file mode 100644
index 0000000000000000000000000000000000000000..f9553162f122c71b34635112e717c3e733b5b212
--- /dev/null
+++ b/android/gradlew.bat
@@ -0,0 +1,84 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/android/keystores/BUCK b/android/keystores/BUCK
new file mode 100644
index 0000000000000000000000000000000000000000..88e4c31b28d497a79bf6c92d9d5d05c589b03886
--- /dev/null
+++ b/android/keystores/BUCK
@@ -0,0 +1,8 @@
+keystore(
+    name = "debug",
+    properties = "debug.keystore.properties",
+    store = "debug.keystore",
+    visibility = [
+        "PUBLIC",
+    ],
+)
diff --git a/android/keystores/debug.keystore.properties b/android/keystores/debug.keystore.properties
new file mode 100644
index 0000000000000000000000000000000000000000..121bfb49f0dfda7b85011c9d1442c9b9f940c9bb
--- /dev/null
+++ b/android/keystores/debug.keystore.properties
@@ -0,0 +1,4 @@
+key.store=debug.keystore
+key.alias=androiddebugkey
+key.store.password=android
+key.alias.password=android
diff --git a/android/settings.gradle b/android/settings.gradle
new file mode 100644
index 0000000000000000000000000000000000000000..0f945c0e2b4aeb280d0b6ebc94d7f9c24028725d
--- /dev/null
+++ b/android/settings.gradle
@@ -0,0 +1,11 @@
+rootProject.name = 'Playard'
+include ':@react-native-community_async-storage'
+project(':@react-native-community_async-storage').projectDir = new File(rootProject.projectDir, '../node_modules/@react-native-community/async-storage/android')
+include ':react-native-google-signin'
+project(':react-native-google-signin').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-google-signin/android')
+include ':react-native-vector-icons'
+project(':react-native-vector-icons').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-vector-icons/android')
+include ':react-native-gesture-handler'
+project(':react-native-gesture-handler').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-gesture-handler/android')
+
+include ':app'
diff --git a/app.json b/app.json
new file mode 100644
index 0000000000000000000000000000000000000000..c2c5150224b9f30a312b32123b7c00794f5b0ed7
--- /dev/null
+++ b/app.json
@@ -0,0 +1,4 @@
+{
+  "name": "Playard",
+  "displayName": "Playard"
+}
\ No newline at end of file
diff --git a/assets/fonts/sharefonts.net.txt b/assets/fonts/sharefonts.net.txt
new file mode 100644
index 0000000000000000000000000000000000000000..17a37c1c4cd9882013bed119e163091a3cb19131
--- /dev/null
+++ b/assets/fonts/sharefonts.net.txt
@@ -0,0 +1 @@
+Free download fonts at http://sharefonts.net
\ No newline at end of file
diff --git a/babel.config.js b/babel.config.js
new file mode 100644
index 0000000000000000000000000000000000000000..f842b77fcfb8b74016365099d8c5fe54cf3269e2
--- /dev/null
+++ b/babel.config.js
@@ -0,0 +1,3 @@
+module.exports = {
+  presets: ['module:metro-react-native-babel-preset'],
+};
diff --git a/index.js b/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..a850d031de79119ee024e9c2fe22809c31417ab3
--- /dev/null
+++ b/index.js
@@ -0,0 +1,9 @@
+/**
+ * @format
+ */
+
+import {AppRegistry} from 'react-native';
+import App from './App';
+import {name as appName} from './app.json';
+
+AppRegistry.registerComponent(appName, () => App);
diff --git a/ios/Playard-tvOS/Info.plist b/ios/Playard-tvOS/Info.plist
new file mode 100644
index 0000000000000000000000000000000000000000..2fb6a11c2c33560fa8fcec75860ed2e8b490ef1b
--- /dev/null
+++ b/ios/Playard-tvOS/Info.plist
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>en</string>
+	<key>CFBundleExecutable</key>
+	<string>$(EXECUTABLE_NAME)</string>
+	<key>CFBundleIdentifier</key>
+	<string>org.reactjs.native.example.$(PRODUCT_NAME:rfc1034identifier)</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>$(PRODUCT_NAME)</string>
+	<key>CFBundlePackageType</key>
+	<string>APPL</string>
+	<key>CFBundleShortVersionString</key>
+	<string>1.0</string>
+	<key>CFBundleSignature</key>
+	<string>????</string>
+	<key>CFBundleVersion</key>
+	<string>1</string>
+	<key>LSRequiresIPhoneOS</key>
+	<true/>
+	<key>UILaunchStoryboardName</key>
+	<string>LaunchScreen</string>
+	<key>UIRequiredDeviceCapabilities</key>
+	<array>
+		<string>armv7</string>
+	</array>
+	<key>UISupportedInterfaceOrientations</key>
+	<array>
+		<string>UIInterfaceOrientationPortrait</string>
+		<string>UIInterfaceOrientationLandscapeLeft</string>
+		<string>UIInterfaceOrientationLandscapeRight</string>
+	</array>
+	<key>UIViewControllerBasedStatusBarAppearance</key>
+	<false/>
+	<key>NSLocationWhenInUseUsageDescription</key>
+	<string></string>
+	<key>NSAppTransportSecurity</key>
+	<!--See http://ste.vn/2015/06/10/configuring-app-transport-security-ios-9-osx-10-11/ -->
+	<dict>
+		<key>NSExceptionDomains</key>
+		<dict>
+			<key>localhost</key>
+			<dict>
+				<key>NSExceptionAllowsInsecureHTTPLoads</key>
+				<true/>
+			</dict>
+		</dict>
+	</dict>
+</dict>
+</plist>
diff --git a/ios/Playard-tvOSTests/Info.plist b/ios/Playard-tvOSTests/Info.plist
new file mode 100644
index 0000000000000000000000000000000000000000..886825ccc9bf0da2b9bfb8d8ebf0737db7ca1114
--- /dev/null
+++ b/ios/Playard-tvOSTests/Info.plist
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>en</string>
+	<key>CFBundleExecutable</key>
+	<string>$(EXECUTABLE_NAME)</string>
+	<key>CFBundleIdentifier</key>
+	<string>org.reactjs.native.example.$(PRODUCT_NAME:rfc1034identifier)</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>$(PRODUCT_NAME)</string>
+	<key>CFBundlePackageType</key>
+	<string>BNDL</string>
+	<key>CFBundleShortVersionString</key>
+	<string>1.0</string>
+	<key>CFBundleSignature</key>
+	<string>????</string>
+	<key>CFBundleVersion</key>
+	<string>1</string>
+</dict>
+</plist>
diff --git a/ios/Playard.xcodeproj/xcshareddata/xcschemes/Playard-tvOS.xcscheme b/ios/Playard.xcodeproj/xcshareddata/xcschemes/Playard-tvOS.xcscheme
new file mode 100644
index 0000000000000000000000000000000000000000..f75a56930ad1fa349ebf47d30b1cef03a3535792
--- /dev/null
+++ b/ios/Playard.xcodeproj/xcshareddata/xcschemes/Playard-tvOS.xcscheme
@@ -0,0 +1,129 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "0940"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "NO"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "2D2A28121D9B038B00D4039D"
+               BuildableName = "libReact.a"
+               BlueprintName = "React-tvOS"
+               ReferencedContainer = "container:../node_modules/react-native/React/React.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "2D02E47A1E0B4A5D006451C7"
+               BuildableName = "Playard-tvOS.app"
+               BlueprintName = "Playard-tvOS"
+               ReferencedContainer = "container:Playard.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "NO"
+            buildForArchiving = "NO"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "2D02E48F1E0B4A5D006451C7"
+               BuildableName = "Playard-tvOSTests.xctest"
+               BlueprintName = "Playard-tvOSTests"
+               ReferencedContainer = "container:Playard.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+         <TestableReference
+            skipped = "NO">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "2D02E48F1E0B4A5D006451C7"
+               BuildableName = "Playard-tvOSTests.xctest"
+               BlueprintName = "Playard-tvOSTests"
+               ReferencedContainer = "container:Playard.xcodeproj">
+            </BuildableReference>
+         </TestableReference>
+      </Testables>
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2D02E47A1E0B4A5D006451C7"
+            BuildableName = "Playard-tvOS.app"
+            BlueprintName = "Playard-tvOS"
+            ReferencedContainer = "container:Playard.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2D02E47A1E0B4A5D006451C7"
+            BuildableName = "Playard-tvOS.app"
+            BlueprintName = "Playard-tvOS"
+            ReferencedContainer = "container:Playard.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Release"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "2D02E47A1E0B4A5D006451C7"
+            BuildableName = "Playard-tvOS.app"
+            BlueprintName = "Playard-tvOS"
+            ReferencedContainer = "container:Playard.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff --git a/ios/Playard.xcodeproj/xcshareddata/xcschemes/Playard.xcscheme b/ios/Playard.xcodeproj/xcshareddata/xcschemes/Playard.xcscheme
new file mode 100644
index 0000000000000000000000000000000000000000..a4105eb6473911eed081a20df993b34fa296bfa6
--- /dev/null
+++ b/ios/Playard.xcodeproj/xcshareddata/xcschemes/Playard.xcscheme
@@ -0,0 +1,129 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "0940"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "NO"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "83CBBA2D1A601D0E00E9B192"
+               BuildableName = "libReact.a"
+               BlueprintName = "React"
+               ReferencedContainer = "container:../node_modules/react-native/React/React.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
+               BuildableName = "Playard.app"
+               BlueprintName = "Playard"
+               ReferencedContainer = "container:Playard.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "NO"
+            buildForArchiving = "NO"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "00E356ED1AD99517003FC87E"
+               BuildableName = "PlayardTests.xctest"
+               BlueprintName = "PlayardTests"
+               ReferencedContainer = "container:Playard.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+         <TestableReference
+            skipped = "NO">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "00E356ED1AD99517003FC87E"
+               BuildableName = "PlayardTests.xctest"
+               BlueprintName = "PlayardTests"
+               ReferencedContainer = "container:Playard.xcodeproj">
+            </BuildableReference>
+         </TestableReference>
+      </Testables>
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
+            BuildableName = "Playard.app"
+            BlueprintName = "Playard"
+            ReferencedContainer = "container:Playard.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
+            BuildableName = "Playard.app"
+            BlueprintName = "Playard"
+            ReferencedContainer = "container:Playard.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Release"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "13B07F861A680F5B00A75B9A"
+            BuildableName = "Playard.app"
+            BlueprintName = "Playard"
+            ReferencedContainer = "container:Playard.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
diff --git a/ios/Playard/AppDelegate.h b/ios/Playard/AppDelegate.h
new file mode 100644
index 0000000000000000000000000000000000000000..2726d5e13c7234ac72a32a8520674bd54d8d1411
--- /dev/null
+++ b/ios/Playard/AppDelegate.h
@@ -0,0 +1,15 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#import <React/RCTBridgeDelegate.h>
+#import <UIKit/UIKit.h>
+
+@interface AppDelegate : UIResponder <UIApplicationDelegate, RCTBridgeDelegate>
+
+@property (nonatomic, strong) UIWindow *window;
+
+@end
diff --git a/ios/Playard/AppDelegate.m b/ios/Playard/AppDelegate.m
new file mode 100644
index 0000000000000000000000000000000000000000..709a1a7f6e2c849d1dfd1a588b541bb2e1d0b8ab
--- /dev/null
+++ b/ios/Playard/AppDelegate.m
@@ -0,0 +1,42 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#import "AppDelegate.h"
+
+#import <React/RCTBridge.h>
+#import <React/RCTBundleURLProvider.h>
+#import <React/RCTRootView.h>
+
+@implementation AppDelegate
+
+- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
+{
+  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];
+  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge
+                                                   moduleName:@"Playard"
+                                            initialProperties:nil];
+
+  rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];
+
+  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
+  UIViewController *rootViewController = [UIViewController new];
+  rootViewController.view = rootView;
+  self.window.rootViewController = rootViewController;
+  [self.window makeKeyAndVisible];
+  return YES;
+}
+
+- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge
+{
+#if DEBUG
+  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index" fallbackResource:nil];
+#else
+  return [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
+#endif
+}
+
+@end
diff --git a/ios/Playard/Base.lproj/LaunchScreen.xib b/ios/Playard/Base.lproj/LaunchScreen.xib
new file mode 100644
index 0000000000000000000000000000000000000000..2364a66fe9a881a7b1065161221d37d019fd734b
--- /dev/null
+++ b/ios/Playard/Base.lproj/LaunchScreen.xib
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.XIB" version="3.0" toolsVersion="7702" systemVersion="14D136" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" useTraitCollections="YES">
+    <dependencies>
+        <deployment identifier="iOS"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="7701"/>
+        <capability name="Constraints with non-1.0 multipliers" minToolsVersion="5.1"/>
+    </dependencies>
+    <objects>
+        <placeholder placeholderIdentifier="IBFilesOwner" id="-1" userLabel="File's Owner"/>
+        <placeholder placeholderIdentifier="IBFirstResponder" id="-2" customClass="UIResponder"/>
+        <view contentMode="scaleToFill" id="iN0-l3-epB">
+            <rect key="frame" x="0.0" y="0.0" width="480" height="480"/>
+            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+            <subviews>
+                <label opaque="NO" clipsSubviews="YES" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Powered by React Native" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" minimumFontSize="9" translatesAutoresizingMaskIntoConstraints="NO" id="8ie-xW-0ye">
+                    <rect key="frame" x="20" y="439" width="441" height="21"/>
+                    <fontDescription key="fontDescription" type="system" pointSize="17"/>
+                    <color key="textColor" cocoaTouchSystemColor="darkTextColor"/>
+                    <nil key="highlightedColor"/>
+                </label>
+                <label opaque="NO" clipsSubviews="YES" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="Playard" textAlignment="center" lineBreakMode="middleTruncation" baselineAdjustment="alignBaselines" minimumFontSize="18" translatesAutoresizingMaskIntoConstraints="NO" id="kId-c2-rCX">
+                    <rect key="frame" x="20" y="140" width="441" height="43"/>
+                    <fontDescription key="fontDescription" type="boldSystem" pointSize="36"/>
+                    <color key="textColor" cocoaTouchSystemColor="darkTextColor"/>
+                    <nil key="highlightedColor"/>
+                </label>
+            </subviews>
+            <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
+            <constraints>
+                <constraint firstItem="kId-c2-rCX" firstAttribute="centerY" secondItem="iN0-l3-epB" secondAttribute="bottom" multiplier="1/3" constant="1" id="5cJ-9S-tgC"/>
+                <constraint firstAttribute="centerX" secondItem="kId-c2-rCX" secondAttribute="centerX" id="Koa-jz-hwk"/>
+                <constraint firstAttribute="bottom" secondItem="8ie-xW-0ye" secondAttribute="bottom" constant="20" id="Kzo-t9-V3l"/>
+                <constraint firstItem="8ie-xW-0ye" firstAttribute="leading" secondItem="iN0-l3-epB" secondAttribute="leading" constant="20" symbolic="YES" id="MfP-vx-nX0"/>
+                <constraint firstAttribute="centerX" secondItem="8ie-xW-0ye" secondAttribute="centerX" id="ZEH-qu-HZ9"/>
+                <constraint firstItem="kId-c2-rCX" firstAttribute="leading" secondItem="iN0-l3-epB" secondAttribute="leading" constant="20" symbolic="YES" id="fvb-Df-36g"/>
+            </constraints>
+            <nil key="simulatedStatusBarMetrics"/>
+            <freeformSimulatedSizeMetrics key="simulatedDestinationMetrics"/>
+            <point key="canvasLocation" x="548" y="455"/>
+        </view>
+    </objects>
+</document>
diff --git a/ios/Playard/Images.xcassets/AppIcon.appiconset/Contents.json b/ios/Playard/Images.xcassets/AppIcon.appiconset/Contents.json
new file mode 100644
index 0000000000000000000000000000000000000000..118c98f7461bf98b2bc7e061150d8021121ad277
--- /dev/null
+++ b/ios/Playard/Images.xcassets/AppIcon.appiconset/Contents.json
@@ -0,0 +1,38 @@
+{
+  "images" : [
+    {
+      "idiom" : "iphone",
+      "size" : "29x29",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "29x29",
+      "scale" : "3x"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "40x40",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "40x40",
+      "scale" : "3x"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "60x60",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "iphone",
+      "size" : "60x60",
+      "scale" : "3x"
+    }
+  ],
+  "info" : {
+    "version" : 1,
+    "author" : "xcode"
+  }
+}
\ No newline at end of file
diff --git a/ios/Playard/Images.xcassets/Contents.json b/ios/Playard/Images.xcassets/Contents.json
new file mode 100644
index 0000000000000000000000000000000000000000..2d92bd53fdb2223e4d23bf1fb6c134fe72931116
--- /dev/null
+++ b/ios/Playard/Images.xcassets/Contents.json
@@ -0,0 +1,6 @@
+{
+  "info" : {
+    "version" : 1,
+    "author" : "xcode"
+  }
+}
diff --git a/ios/Playard/Info.plist b/ios/Playard/Info.plist
new file mode 100644
index 0000000000000000000000000000000000000000..20f96bdded839ba452ad3b7172d5ee7d036d5e5b
--- /dev/null
+++ b/ios/Playard/Info.plist
@@ -0,0 +1,117 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>en</string>
+	<key>CFBundleDisplayName</key>
+	<string>Playard</string>
+	<key>CFBundleExecutable</key>
+	<string>$(EXECUTABLE_NAME)</string>
+	<key>CFBundleIdentifier</key>
+	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>$(PRODUCT_NAME)</string>
+	<key>CFBundlePackageType</key>
+	<string>APPL</string>
+	<key>CFBundleShortVersionString</key>
+	<string>1.0</string>
+	<key>CFBundleSignature</key>
+	<string>????</string>
+	<key>CFBundleVersion</key>
+	<string>1</string>
+	<key>LSRequiresIPhoneOS</key>
+	<true/>
+	<key>NSLocationWhenInUseUsageDescription</key>
+	<string/>
+	<key>UILaunchStoryboardName</key>
+	<string>LaunchScreen</string>
+	<key>UIRequiredDeviceCapabilities</key>
+	<array>
+		<string>armv7</string>
+	</array>
+	<key>UISupportedInterfaceOrientations</key>
+	<array>
+		<string>UIInterfaceOrientationPortrait</string>
+		<string>UIInterfaceOrientationLandscapeLeft</string>
+		<string>UIInterfaceOrientationLandscapeRight</string>
+	</array>
+	<key>UIViewControllerBasedStatusBarAppearance</key>
+	<false/>
+	<key>NSAppTransportSecurity</key>
+	<dict>
+		<key>NSAllowsArbitraryLoads</key>
+		<true/>
+		<key>NSExceptionDomains</key>
+		<dict>
+			<key>localhost</key>
+			<dict>
+				<key>NSExceptionAllowsInsecureHTTPLoads</key>
+				<true/>
+			</dict>
+		</dict>
+	</dict>
+	<key>UIAppFonts</key>
+	<array>
+		<string>Ionicons.ttf</string>
+		<string>AntDesign.ttf</string>
+		<string>Entypo.ttf</string>
+		<string>EvilIcons.ttf</string>
+		<string>Feather.ttf</string>
+		<string>FontAwesome.ttf</string>
+		<string>FontAwesome5_Brands.ttf</string>
+		<string>FontAwesome5_Regular.ttf</string>
+		<string>FontAwesome5_Solid.ttf</string>
+		<string>Foundation.ttf</string>
+		<string>MaterialCommunityIcons.ttf</string>
+		<string>MaterialIcons.ttf</string>
+		<string>Octicons.ttf</string>
+		<string>Roboto_medium.ttf</string>
+		<string>Roboto.ttf</string>
+		<string>rubicon-icon-font.ttf</string>
+		<string>SimpleLineIcons.ttf</string>
+		<string>Zocial.ttf</string>
+		<string>glyphicons-halflings-regular.ttf</string>
+		<string>glyphicons-halflings-regular.woff</string>
+		<string>glyphicons-halflings-regular.woff2</string>
+		<string>Lato-Bla_0.ttf</string>
+		<string>Lato-BlaIta_0.ttf</string>
+		<string>Lato-Bol_0.ttf</string>
+		<string>Lato-BolIta_0.ttf</string>
+		<string>Lato-Hai_1.ttf</string>
+		<string>Lato-HaiIta_1.ttf</string>
+		<string>Lato-Hairline.ttf</string>
+		<string>Lato-HairlineItalic.ttf</string>
+		<string>Lato-Heavy.ttf</string>
+		<string>Lato-HeavyItalic.ttf</string>
+		<string>Lato-Light.ttf</string>
+		<string>Lato-LightItalic.ttf</string>
+		<string>Lato-Medium.ttf</string>
+		<string>Lato-MediumItalic.ttf</string>
+		<string>Lato-Reg_0.ttf</string>
+		<string>Lato-RegIta_0.ttf</string>
+		<string>Lato-Semibold.ttf</string>
+		<string>Lato-SemiboldItalic.ttf</string>
+		<string>Lato-Thin.ttf</string>
+		<string>Lato-ThinItalic.ttf</string>
+		<string>TCB.TTF</string>
+		<string>TCM.TTF</string>
+		<string>TwCenClassMTStd-Regular.otf</string>
+		<string>TwCenMTStd-Bold.otf</string>
+		<string>TwCenMTStd-BoldCond.otf</string>
+		<string>TwCenMTStd-ExtraBold.otf</string>
+		<string>TwCenMTStd-ExtraBoldCond.otf</string>
+		<string>TwCenMTStd-Italic.otf</string>
+		<string>TwCenMTStd-Light.otf</string>
+		<string>TwCenMTStd-LightItalic.otf</string>
+		<string>TwCenMTStd-MediumCond.otf</string>
+		<string>TwCenMTStd-SemiMedium.otf</string>
+		<string>TwCenMTStd-UltraBold.otf</string>
+		<string>TwCenMTStd-UltraBoldCond.otf</string>
+		<string>TwCenMTStd-UltraBoldIt.otf</string>
+		<string>TwCenMTStd.otf</string>
+	</array>
+</dict>
+</plist>
diff --git a/ios/Playard/main.m b/ios/Playard/main.m
new file mode 100644
index 0000000000000000000000000000000000000000..c316cf816e736a87cc7e034be9c964f0a24ce5c3
--- /dev/null
+++ b/ios/Playard/main.m
@@ -0,0 +1,16 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#import <UIKit/UIKit.h>
+
+#import "AppDelegate.h"
+
+int main(int argc, char * argv[]) {
+  @autoreleasepool {
+    return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
+  }
+}
diff --git a/ios/PlayardTests/Info.plist b/ios/PlayardTests/Info.plist
new file mode 100644
index 0000000000000000000000000000000000000000..ba72822e8728ef2951005e49b6c27a2f1da6572d
--- /dev/null
+++ b/ios/PlayardTests/Info.plist
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>en</string>
+	<key>CFBundleExecutable</key>
+	<string>$(EXECUTABLE_NAME)</string>
+	<key>CFBundleIdentifier</key>
+	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>$(PRODUCT_NAME)</string>
+	<key>CFBundlePackageType</key>
+	<string>BNDL</string>
+	<key>CFBundleShortVersionString</key>
+	<string>1.0</string>
+	<key>CFBundleSignature</key>
+	<string>????</string>
+	<key>CFBundleVersion</key>
+	<string>1</string>
+</dict>
+</plist>
diff --git a/ios/PlayardTests/PlayardTests.m b/ios/PlayardTests/PlayardTests.m
new file mode 100644
index 0000000000000000000000000000000000000000..8358c026e6f7141e046ffce9ea8d8d881d15d1fa
--- /dev/null
+++ b/ios/PlayardTests/PlayardTests.m
@@ -0,0 +1,68 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+#import <UIKit/UIKit.h>
+#import <XCTest/XCTest.h>
+
+#import <React/RCTLog.h>
+#import <React/RCTRootView.h>
+
+#define TIMEOUT_SECONDS 600
+#define TEXT_TO_LOOK_FOR @"Welcome to React Native!"
+
+@interface PlayardTests : XCTestCase
+
+@end
+
+@implementation PlayardTests
+
+- (BOOL)findSubviewInView:(UIView *)view matching:(BOOL(^)(UIView *view))test
+{
+  if (test(view)) {
+    return YES;
+  }
+  for (UIView *subview in [view subviews]) {
+    if ([self findSubviewInView:subview matching:test]) {
+      return YES;
+    }
+  }
+  return NO;
+}
+
+- (void)testRendersWelcomeScreen
+{
+  UIViewController *vc = [[[RCTSharedApplication() delegate] window] rootViewController];
+  NSDate *date = [NSDate dateWithTimeIntervalSinceNow:TIMEOUT_SECONDS];
+  BOOL foundElement = NO;
+
+  __block NSString *redboxError = nil;
+  RCTSetLogFunction(^(RCTLogLevel level, RCTLogSource source, NSString *fileName, NSNumber *lineNumber, NSString *message) {
+    if (level >= RCTLogLevelError) {
+      redboxError = message;
+    }
+  });
+
+  while ([date timeIntervalSinceNow] > 0 && !foundElement && !redboxError) {
+    [[NSRunLoop mainRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate dateWithTimeIntervalSinceNow:0.1]];
+    [[NSRunLoop mainRunLoop] runMode:NSRunLoopCommonModes beforeDate:[NSDate dateWithTimeIntervalSinceNow:0.1]];
+
+    foundElement = [self findSubviewInView:vc.view matching:^BOOL(UIView *view) {
+      if ([view.accessibilityLabel isEqualToString:TEXT_TO_LOOK_FOR]) {
+        return YES;
+      }
+      return NO;
+    }];
+  }
+
+  RCTSetLogFunction(RCTDefaultLogFunction);
+
+  XCTAssertNil(redboxError, @"RedBox error: %@", redboxError);
+  XCTAssertTrue(foundElement, @"Couldn't find element with text '%@' in %d seconds", TEXT_TO_LOOK_FOR, TIMEOUT_SECONDS);
+}
+
+
+@end
diff --git a/metro.config.js b/metro.config.js
new file mode 100644
index 0000000000000000000000000000000000000000..13a964217f20a081de8765924a21f9dad0e95306
--- /dev/null
+++ b/metro.config.js
@@ -0,0 +1,17 @@
+/**
+ * Metro configuration for React Native
+ * https://github.com/facebook/react-native
+ *
+ * @format
+ */
+
+module.exports = {
+  transformer: {
+    getTransformOptions: async () => ({
+      transform: {
+        experimentalImportSupport: false,
+        inlineRequires: false,
+      },
+    }),
+  },
+};
diff --git a/package.json b/package.json
new file mode 100644
index 0000000000000000000000000000000000000000..261dbc52ce9eeff8cfdbbb245851f372477ed67f
--- /dev/null
+++ b/package.json
@@ -0,0 +1,46 @@
+{
+  "name": "Playard",
+  "version": "0.0.1",
+  "private": true,
+  "scripts": {
+    "start": "node node_modules/react-native/local-cli/cli.js start",
+    "test": "jest"
+  },
+  "dependencies": {
+    "@react-native-community/async-storage": "^1.3.3",
+    "accordion-collapse-react-native": "^0.1.9",
+    "ionicons": "^4.5.5",
+    "native-base": "^2.12.1",
+    "react": "16.8.3",
+    "react-native": "0.59.3",
+    "react-native-confirmation-code-input": "^1.0.4",
+    "react-native-elements": "^1.1.0",
+    "react-native-gesture-handler": "^1.1.0",
+    "react-native-google-signin": "^1.2.2",
+    "react-native-hr-component": "^2.0.2",
+    "react-native-ionicons": "^4.5.5",
+    "react-native-otp-inputs": "^2.0.1",
+    "react-native-page-swiper": "^0.3.0",
+    "react-native-router-flux": "^4.0.6",
+    "react-native-swiper-flatlist": "^1.0.9",
+    "react-native-switch-toggle": "^1.0.8",
+    "react-native-vector-icons": "^6.4.2",
+    "react-navigation": "^3.6.1"
+  },
+  "devDependencies": {
+    "@babel/core": "^7.4.3",
+    "@babel/runtime": "^7.4.3",
+    "babel-jest": "^24.7.1",
+    "jest": "^24.7.1",
+    "metro-react-native-babel-preset": "^0.53.1",
+    "react-test-renderer": "16.8.3"
+  },
+  "jest": {
+    "preset": "react-native"
+  },
+  "rnpm": {
+    "assets": [
+      "./assets/fonts"
+    ]
+  }
+}
diff --git a/src/components/Constants.js b/src/components/Constants.js
new file mode 100644
index 0000000000000000000000000000000000000000..5609fc94d00f33fc58442b0bb33a9b9fea8c4af1
--- /dev/null
+++ b/src/components/Constants.js
@@ -0,0 +1,3 @@
+ export const userNameKey= '@myApp:username';
+
+ export const mobileNumberKey= 'mobileNumber';
diff --git a/src/components/Navigator.js b/src/components/Navigator.js
new file mode 100644
index 0000000000000000000000000000000000000000..47049c350a8a2754c29af751eb30de7d00c70859
--- /dev/null
+++ b/src/components/Navigator.js
@@ -0,0 +1,45 @@
+import { createStackNavigator,createAppContainer } from 'react-navigation';
+
+import signUp from './signUp';
+import signIn from './signIn';
+import Otp from './Otp';
+import forgotPassword from './forgotPassword';
+import resetPassword from './resetPassword';
+import Profile from './Profile';
+import Otp_reset from './Otp_reset';
+import Preffered_sports from './Preffered_sports';
+import create_Activity from './create_Activity';
+import select_Sports from './select_Sports';
+import select_Location from './select_Location';
+import select_Date from './select_Date';
+import select_Time from './select_Time';
+
+import Splashscreen from './Splashscreen';
+
+ const Navigator = createStackNavigator
+(	{
+		
+		signUp: { screen: signUp },
+		signIn:{screen: signIn},
+		Otp: {screen: Otp},
+		forgotPassword: {screen: forgotPassword},
+		Profile: { screen: Profile },	
+		Otp_reset: { screen: Otp_reset },	
+		resetPassword: {screen: resetPassword},
+		Preffered_sports: {screen: Preffered_sports},
+		create_Activity: {screen: create_Activity},
+		select_Sports: {screen: select_Sports},
+		select_Location: {screen: select_Location},
+		select_Date: {screen: select_Date},
+		select_Time: {screen: select_Time},
+
+		Splashscreen: { screen: Splashscreen },	
+	},
+	{
+    initialRouteName: 'signUp',
+  	}
+
+);
+
+export default  createAppContainer(Navigator);
+
diff --git a/src/components/Otp.js b/src/components/Otp.js
new file mode 100644
index 0000000000000000000000000000000000000000..49234ebdab665b03224b9ef407050bb9c76d785e
--- /dev/null
+++ b/src/components/Otp.js
@@ -0,0 +1,398 @@
+import React from 'react';
+import { StyleSheet, Text,TextInput,TouchableOpacity,Button,TouchableHighlight,ScrollView,Image,View } from 'react-native';
+import Icon from 'react-native-ionicons';
+import { mobileNumberKey} from './Constants';
+import AsyncStorage from '@react-native-community/async-storage';
+
+export default class Otp extends React.Component {
+  static navigationOptions = {
+       header: null,
+    };
+  constructor(props) 
+  {
+    super(props);
+      this.state = 
+            {
+              myKey: '',
+              otp : "",
+              otp1:'', 
+              otp2:'', 
+              otp3:'', 
+              otp4:'', 
+              otp5:'', 
+              otp6:'', 
+              deviceType:'android',
+              deviceToken:'Testing',
+              regType:'direct',
+              clearInput:false
+            };
+
+  }
+
+async getKey() {
+    try {
+      const value = await AsyncStorage.getItem('@storage_Key');
+      this.setState({myKey: value});
+      } 
+      catch (error) 
+      {
+      console.log("Error retrieving data" + error);
+    }
+  }
+  componentDidMount(){
+    this.getKey();
+}
+
+        verifyotp = (e) =>
+          {
+             
+              const {otp1,otp2,otp3,otp4,otp5,otp6}=this.state;
+              var mainOtp = otp1.concat(otp2,otp3,otp4,otp5,otp6);
+              this.setState({otp : mainOtp},() => {console.log(this.state.otp)});
+
+              let formData = new FormData();
+              formData.append('mobileNumber', this.state.myKey);
+              formData.append('otp',mainOtp);
+              formData.append('deviceType', this.state.deviceType);
+              formData.append('deviceToken', this.state.deviceToken);
+              formData.append('regType', this.state.regType);
+              let data = {
+                  method: 'POST',
+                  headers: {
+                      'Accept': 'application/json',
+                      "Content-Type": "multipart/form-data",
+                  },
+                  body: formData
+              }
+              fetch("http://testingmadesimple.org/playard/api/service/verifyotp", data)
+              .then(response => response.json())
+              .then(responseJson => 
+               { 
+                        if(responseJson.status == ("1"))
+                         {                           
+                            alert("Registered Successfully");
+                            this.props.navigation.navigate("Profile");
+                            this.setState({
+                                  otp1: '',
+                                  otp2:'',
+                                  otp3:'',
+                                  otp4:'',
+                                  otp5:'',
+                                  otp6:''
+                                })                           
+                          }
+                          else if(responseJson.status == ("0"))
+                          {
+                            alert("Required fields are missing");
+                          }
+                           else if(responseJson.status == ("2"))
+                          {
+                            alert("Mobile Number doesn't exists with us");
+                          }
+                          else
+                          {
+                            alert("Wrong OTP");
+                          }                          
+                         console.log('response:', responseJson)
+                }
+
+              )
+
+              .catch(error => console.error(error));
+              console.log(data)
+              // console.log(this.state)
+
+              
+          }
+  resendotp(){
+              let formData = new FormData();
+              formData.append('mobileNumber', this.state.myKey);             
+              let data = {
+                  method: 'POST',
+                  headers: {
+                      'Accept': 'application/json',
+                      "Content-Type": "multipart/form-data",
+                  },
+                  body: formData
+              }
+              fetch("http://testingmadesimple.org/playard/api/service/resendotp", data)
+              .then(response => response.json())
+              .then(responseJson => 
+               { 
+                        if(responseJson.status == ("1"))
+                         {                           
+                            alert("Resended OTP Successfully");
+                                              
+                          }
+                          else if(responseJson.status == ("0"))
+                          {
+                            alert("Required fields are missing");
+                          }
+                           else if(responseJson.status == ("2"))
+                          {
+                            alert("Mobile Number doesn't exists with us");
+                          }
+                          else
+                          {
+                            alert("Failed to send");
+                          }                          
+                         console.log('response:', responseJson)
+                }
+
+              )
+
+              .catch(error => console.error(error));
+              console.log(data)
+
+  }
+  
+
+ render() 
+ {
+   return(
+      <View style={{flex:1}}>
+               <ScrollView>
+                  <View style={styles.container}>
+                      <View style={styles.backArrowView}>
+                            <Icon name='arrow-back' size={24} color={'black'}  onPress={() => this.props.navigation.navigate('')}
+                            />
+                      </View> 
+                      <View style={{marginBottom:60}}>
+                            <Text style={styles.signInText}>OTP</Text>
+                            <Text style={styles.signInText}>VERIFICATION</Text>
+                      </View>
+                      <Text style={styles.forgotText}>Sent a Verification code to verify </Text>                
+                      <Text style={styles.forgotText}> your mobile number</Text>                     
+                      <View style={styles.sentWrapper}>
+                                <Text style={styles.forgotText}>Send to </Text>
+                                <Text style={styles.forgotText}>{this.state.myKey}</Text>                
+                      </View>
+                      
+                                        
+                      <View style={styles.otpArray}>
+                            <TextInput
+                              ref={(input) => { this.otp1 = input; }}
+                              style={styles.otpText}
+                              keyboardType={'phone-pad'}
+                              maxLength={1}
+                              returnKeyType = { "next" }
+                              onChangeText={(text1) => 
+                                  {
+                                   this.setState({otp1:text1})
+                                   if(text1 && text1.length == 1){
+                                    this.otp2.focus();
+                                  }
+                                  }
+                              }                              
+                              value={this.state.otp1}
+                              blurOnSubmit={false}                         
+                            />
+
+                            <TextInput
+                              ref={(input) => { this.otp2 = input; }}
+                              style={styles.otpText}
+                              keyboardType={'phone-pad'}
+                              onChangeText={(text1) => 
+                                  {
+                                   this.setState({otp2:text1})
+                                   if(text1 && text1.length == 1){
+                                    this.otp3.focus();
+                                  }
+                                  else{
+                                    this.otp1.focus();
+                                  }
+                                  }
+                              }                                 
+                              maxLength={1}
+                              value={this.state.otp2}
+                              returnKeyType = { "next" }
+                              blurOnSubmit={false}
+
+                            />
+                            <TextInput
+                              ref={(input) => { this.otp3 = input; }}
+                              style={styles.otpText}
+                              maxLength={1}
+                              keyboardType={'phone-pad'}
+                              onChangeText={(text1) => 
+                                  {
+                                   this.setState({otp3:text1})
+                                   if(text1 && text1.length == 1){
+                                    this.otp4.focus();
+                                  }
+                                  else{
+                                    this.otp2.focus();
+                                  }
+                                  }
+                              }                              
+                              value={this.state.otp3}
+                              returnKeyType = { "next" }
+                              blurOnSubmit={false}
+                            />
+                            <TextInput
+                              ref={(input) => { this.otp4 = input; }}
+                              style={styles.otpText}
+                              keyboardType={'phone-pad'}
+                              maxLength={1}
+                              onChangeText={(text1) => 
+                                  {
+                                   this.setState({otp4:text1})
+                                   if(text1 && text1.length == 1){
+                                    this.otp5.focus();
+                                  }
+                                  else{
+                                    this.otp3.focus();
+                                  }
+                                  }
+                              }                              
+                              value={this.state.otp4}
+                               returnKeyType = { "next" }
+                              blurOnSubmit={false}
+                            />
+                            <TextInput
+                              ref={(input) => { this.otp5 = input; }}
+                              style={styles.otpText}
+                              keyboardType={'phone-pad'}
+                              maxLength={1}
+                              onChangeText={(text1) => 
+                                  {
+                                   this.setState({otp5:text1})
+                                   if(text1 && text1.length == 1){
+                                    this.otp6.focus();
+                                  }
+                                  else{
+                                    this.otp4.focus();
+                                  }
+                                  }
+                              }                              
+                              value={this.state.otp5}
+                               returnKeyType = { "next" }
+                              blurOnSubmit={false}
+                            />
+                            <TextInput
+                              ref={(input) => { this.otp6 = input; }}
+                              returnKeyType = { "done" }
+                              style={styles.otpText}
+                              maxLength={1}
+                              keyboardType={'phone-pad'}
+                              onChangeText={(text1) => 
+                                  {
+                                   this.setState({otp6:text1})
+                                   if(text1 && text1.length == 1){
+                                  }
+                                  else{
+                                    this.otp5.focus();
+                                  }                                 
+                                  }
+                              } 
+                              value={this.state.otp6}
+                              onSubmitEditing={()=>{this.verifyotp()}}
+
+                            />
+                      </View>
+
+
+                      <View style={styles.resendWrapper}>  
+                          <Text style={styles.forgotText}>Didn't get code yet?</Text>
+                          <TouchableOpacity onPress={()=>{this.resendotp()}}>
+                                <Text style={[styles.forgotText,{ color:"#33cbf6",marginLeft:8, fontFamily:"TwCenMTStd-Bold",}]}>Resend</Text>                             
+                          </TouchableOpacity>
+                      </View>
+                      
+                      <Text style={[styles.forgotText,{ color:"#363f4d",marginBottom:50}]}>+91 {this.state.myKey} is not your Number?</Text>                             
+                      <View style={styles.signInBtn}>
+                            <TouchableOpacity>
+                                  <Text style={styles.signInBtnText}>Enter your mobile number</Text>
+                            </TouchableOpacity>
+                      </View>
+                      
+
+                                 
+                </View>
+          </ScrollView>
+               
+      </View>
+   );
+ }
+}
+const styles = StyleSheet.create({
+  container: 
+  {
+    padding:30 
+  },
+  signInText:
+  {
+    fontSize:25,
+    color:"#363f4d",
+    fontFamily:"TwCenMTStd-Bold",
+  },
+  backArrowView:
+  {
+    marginBottom:10
+  },
+
+  forgotText:
+  {
+    fontSize:18,
+    color:"#7f7f7f",
+    fontFamily:"TwCenMTStd",
+    textAlign:"center"
+  },
+  sentWrapper:
+  {
+    marginTop:15,
+    marginBottom:20,
+    flexDirection:"row",
+    justifyContent:"center"
+  },
+  signInBtn:
+  {   
+    backgroundColor:"#33cbf6",
+    borderRadius:5,
+  },
+  signInBtnText:
+  {
+    fontSize:20 ,
+    color:'#fff',
+    textAlign:"center",
+    padding:5,
+    fontFamily:"TwCenMTStd"
+  },
+  resendWrapper:
+  {
+    flexDirection:"row",
+    justifyContent:"center",
+    alignItems:"center",
+    marginBottom:20
+  },
+  otpArray:
+  {
+    flexWrap: 'wrap',
+    alignItems: 'center',
+    flexDirection:'row',
+    justifyContent:"center",
+    marginBottom:20                               
+  },
+  otpText:
+  {
+    height: 40,
+    width:35, 
+    borderColor: '#3DBEF5',
+    borderBottomWidth: 2,
+    color:"#3DBEF5" ,
+    fontSize:14,
+    fontFamily:"Lato-Medium",
+    // marginTop:20,
+    paddingLeft:12,
+    marginLeft:7
+
+  },
+  inputField:
+  {
+    borderColor: '#ddd',
+    borderBottomWidth: 1,
+    fontFamily:"Lato-Medium",
+    marginBottom:20
+  },
+
+});
\ No newline at end of file
diff --git a/src/components/Otp_reset.js b/src/components/Otp_reset.js
new file mode 100644
index 0000000000000000000000000000000000000000..caf21f6460d63cee0f14293077ea96677d13f671
--- /dev/null
+++ b/src/components/Otp_reset.js
@@ -0,0 +1,393 @@
+import React from 'react';
+import { StyleSheet, Text,TextInput,TouchableOpacity,Button,TouchableHighlight,ScrollView,Image,View } from 'react-native';
+import Icon from 'react-native-ionicons';
+import { mobileNumberKey} from './Constants';
+import AsyncStorage from '@react-native-community/async-storage';
+
+export default class Otp_reset extends React.Component {
+  static navigationOptions = {
+       header: null,
+    };
+  constructor(props) 
+  {
+    super(props);
+      this.state = 
+            {
+              myKey: '',
+              otp : "",
+              otp1:'', 
+              otp2:'', 
+              otp3:'', 
+              otp4:'', 
+              otp5:'', 
+              otp6:'', 
+              deviceType:'android',
+              deviceToken:'Testing',
+              regType:'direct',
+              clearInput:false
+            };
+
+  }
+
+async getKey() {
+    try {
+      const value = await AsyncStorage.getItem('@forgotpwd_number');
+      this.setState({myKey: value});
+      } 
+      catch (error) 
+      {
+      console.log("Error retrieving data" + error);
+    }
+  }
+  componentDidMount(){
+    this.getKey();
+}
+
+        verifyotp = (e) =>
+          {
+             
+              const {otp1,otp2,otp3,otp4,otp5,otp6}=this.state;
+              var mainOtp = otp1.concat(otp2,otp3,otp4,otp5,otp6);
+              this.setState({otp : mainOtp},() => {console.log(this.state.otp)});
+
+              let formData = new FormData();
+              formData.append('mobileNumber', this.state.myKey);
+              formData.append('otp',mainOtp);
+              formData.append('deviceType', this.state.deviceType);
+              formData.append('deviceToken', this.state.deviceToken);
+              formData.append('regType', this.state.regType);
+              let data = {
+                  method: 'POST',
+                  headers: {
+                      'Accept': 'application/json',
+                      "Content-Type": "multipart/form-data",
+                  },
+                  body: formData
+              }
+              fetch("http://testingmadesimple.org/playard/api/service/verifyotp", data)
+              .then(response => response.json())
+              .then(responseJson => 
+               { 
+                        if(responseJson.status == ("1"))
+                         {                                                       
+                            this.props.navigation.navigate("resetPassword");
+                            this.setState({
+                                  otp1: '',
+                                  otp2:'',
+                                  otp3:'',
+                                  otp4:'',
+                                  otp5:'',
+                                  otp6:''
+                                })                           
+                          }
+                          else if(responseJson.status == ("0"))
+                          {
+                            alert("Required fields are missing");
+                          }
+                           else if(responseJson.status == ("2"))
+                          {
+                            alert("Mobile Number doesn't exists with us");
+                          }
+                          else
+                          {
+                            alert("Wrong OTP");
+                          }                          
+                         console.log('response:', responseJson)
+                }
+
+              )
+
+              .catch(error => console.error(error));
+              console.log(data)
+              // console.log(this.state)
+
+              
+          }
+  resendotp(){
+              let formData = new FormData();
+              formData.append('mobileNumber', this.state.myKey);             
+              let data = {
+                  method: 'POST',
+                  headers: {
+                      'Accept': 'application/json',
+                      "Content-Type": "multipart/form-data",
+                  },
+                  body: formData
+              }
+              fetch("http://testingmadesimple.org/playard/api/service/resendotp", data)
+              .then(response => response.json())
+              .then(responseJson => 
+               { 
+                        if(responseJson.status == ("1"))
+                         {                           
+                            alert("Resended OTP Successfully");
+                                              
+                          }
+                          else if(responseJson.status == ("0"))
+                          {
+                            alert("Required fields are missing");
+                          }
+                           else if(responseJson.status == ("2"))
+                          {
+                            alert("Mobile Number doesn't exists with us");
+                          }
+                          else
+                          {
+                            alert("Failed to send");
+                          }                          
+                         console.log('response:', responseJson)
+                }
+
+              )
+
+              .catch(error => console.error(error));
+              console.log(data)
+
+  }
+
+ render() 
+ {
+   return(
+      <View style={{flex:1}}>
+               <ScrollView>
+                  <View style={styles.container}>
+                      <View style={styles.backArrowView}>
+                            <Icon name='arrow-back' size={24} color={'black'}  onPress={() => this.props.navigation.navigate('')}
+                            />
+                      </View> 
+                      <View style={{marginBottom:60}}>
+                            <Text style={styles.signInText}>OTP</Text>
+                            <Text style={styles.signInText}>VERIFICATION</Text>
+                      </View>
+                      <Text style={styles.forgotText}>Sent a Verification code to verify</Text>                
+                      <Text style={styles.forgotText}>your mobile number</Text>                     
+                      <View style={styles.sentWrapper}>
+                                <Text style={styles.forgotText}>Send to </Text>
+                                <Text style={styles.forgotText}>{this.state.myKey}</Text>                
+                       </View>
+                      
+                                        
+                      <View style={styles.otpArray}>
+                            <TextInput
+                              style={styles.otpText}
+                              keyboardType={'phone-pad'}
+                              maxLength={1}
+                              returnKeyType = { "next" }
+                              ref={(input) => { this.otp1 = input; }}
+                              onChangeText={(text1) => 
+                                  {
+                                   this.setState({otp1:text1})
+                                   if(text1 && text1.length == 1){
+                                    this.otp2.focus();
+                                  }
+                                  }
+                              }                                     
+                              value={this.state.otp1}
+                              onSubmitEditing={() => { this.otp2.focus(); }}
+                              blurOnSubmit={false}
+                            />
+
+                            <TextInput
+                              ref={(input) => { this.otp2 = input; }}
+                              style={styles.otpText}
+                              keyboardType={'phone-pad'}
+                              onChangeText={(text1) => 
+                                  {
+                                   this.setState({otp2:text1})
+                                   if(text1 && text1.length == 1){
+                                    this.otp3.focus();
+                                  }
+                                  else{
+                                    this.otp1.focus();
+                                  }
+                                  }
+                              }                                   maxLength={1}
+                              value={this.state.otp2}
+                              returnKeyType = { "next" }
+                              blurOnSubmit={false}
+
+                            />
+                            <TextInput
+                              ref={(input) => { this.otp3 = input; }}
+                              style={styles.otpText}
+                              maxLength={1}
+                              keyboardType={'phone-pad'}
+                              onChangeText={(text1) => 
+                                  {
+                                   this.setState({otp3:text1})
+                                   if(text1 && text1.length == 1){
+                                    this.otp4.focus();
+                                  }
+                                  else{
+                                    this.otp2.focus();
+                                  }
+                                  }
+                              }                              
+                              value={this.state.otp3}
+                              returnKeyType = { "next" }
+                              blurOnSubmit={false}
+                            />
+                            <TextInput
+                              ref={(input) => { this.otp4 = input; }}
+                              style={styles.otpText}
+                              keyboardType={'phone-pad'}
+                              maxLength={1}
+                              onChangeText={(text1) => 
+                                  {
+                                   this.setState({otp4:text1})
+                                   if(text1 && text1.length == 1){
+                                    this.otp5.focus();
+                                  }
+                                  else{
+                                    this.otp3.focus();
+                                  }
+                                  }
+                              }                                     
+                              value={this.state.otp4}
+                              returnKeyType = { "next" }
+                              blurOnSubmit={false}
+                            />
+                            <TextInput
+                              ref={(input) => { this.otp5 = input; }}
+                              style={styles.otpText}
+                              keyboardType={'phone-pad'}
+                              maxLength={1}
+                              onChangeText={(text1) => 
+                                  {
+                                   this.setState({otp5:text1})
+                                   if(text1 && text1.length == 1){
+                                    this.otp6.focus();
+                                  }
+                                  else{
+                                    this.otp4.focus();
+                                  }
+                                  }
+                              }                                  
+                              value={this.state.otp5}
+                              returnKeyType = { "next" }
+                              blurOnSubmit={false}
+                            />
+                            <TextInput
+                              ref={(input) => { this.otp6 = input; }}
+                              returnKeyType = { "done" }
+                              style={styles.otpText}
+                              maxLength={1}
+                              keyboardType={'phone-pad'}
+                              onChangeText={(text1) => 
+                                  {
+                                   this.setState({otp6:text1})
+                                   if(text1 && text1.length == 1){
+                                  }
+                                  else{
+                                    this.otp5.focus();
+                                  }                                 
+                                  }
+                              } 
+                              value={this.state.otp6}
+                              onSubmitEditing={()=>{this.verifyotp()}}
+
+                            />
+                      </View>
+                      <View style={styles.resendWrapper}>  
+                          <Text style={styles.forgotText}>Didn't get code yet?</Text>
+                          <TouchableOpacity onPress={()=>{this.resendotp()}}>
+                                <Text style={[styles.forgotText,{ color:"#3DBEF5",marginLeft:8}]}>Resend</Text>                             
+                          </TouchableOpacity>
+                      </View>
+                      
+                      <Text style={[styles.forgotText,{ color:"black",marginBottom:50}]}>+91 {this.state.myKey} is not your Number?</Text>                             
+                      <View style={styles.signInBtn}>
+                            <TouchableOpacity>
+                                  <Text style={styles.signInBtnText}>Enter your mobile number</Text>
+                            </TouchableOpacity>
+                      </View>
+                      
+
+                                 
+                </View>
+          </ScrollView>
+               
+      </View>
+   );
+ }
+}
+const styles = StyleSheet.create({
+  container: 
+  {
+    padding:30 
+  },
+  signInText:
+  {
+    fontSize:25,
+    color:"#363f4d",
+    fontFamily:"TwCenMTStd-Bold",
+  },
+  backArrowView:
+  {
+    marginBottom:10
+  },
+
+  forgotText:
+  {
+    fontSize:18,
+    color:"#7f7f7f",
+    fontFamily:"TwCenMTStd",
+    textAlign:"center"
+  },
+  sentWrapper:
+  {
+    marginTop:15,
+    marginBottom:20,
+    flexDirection:"row",
+    justifyContent:"center"
+  },
+  signInBtn:
+  {   
+    backgroundColor:"#33cbf6",
+    borderRadius:5,
+  },
+  signInBtnText:
+  {
+    fontSize:20 ,
+    color:'#fff',
+    textAlign:"center",
+    padding:5,
+    fontFamily:"TwCenMTStd"
+  },
+  resendWrapper:
+  {
+    flexDirection:"row",
+    justifyContent:"center",
+    alignItems:"center",
+    marginBottom:20
+  },
+  otpArray:
+  {
+    flexWrap: 'wrap',
+    alignItems: 'center',
+    flexDirection:'row',
+    justifyContent:"center",
+    marginBottom:20                               
+  },
+  otpText:
+  {
+    height: 40,
+    width:35, 
+    borderColor: '#3DBEF5',
+    borderBottomWidth: 2,
+    color:"#3DBEF5" ,
+    fontSize:14,
+    fontFamily:"TwCenMTStd",
+    paddingLeft:12,
+    marginLeft:7
+
+  },
+  inputField:
+  {
+    borderColor: '#ddd',
+    borderBottomWidth: 1,
+    fontFamily:"TwCenMTStd",
+    marginBottom:20
+  },
+
+});
\ No newline at end of file
diff --git a/src/components/Preffered_sports.js b/src/components/Preffered_sports.js
new file mode 100644
index 0000000000000000000000000000000000000000..e4a842e23083d3bbeec700269786d8729a05cf78
--- /dev/null
+++ b/src/components/Preffered_sports.js
@@ -0,0 +1,434 @@
+import React, { Component } from 'react';
+import {
+  AppRegistry,
+  StyleSheet,SafeAreaView,
+  Text,
+  TextInput,CheckBox,
+  View,TouchableOpacity,Image,
+  AsyncStorage
+} from 'react-native';
+import {  Item, Input } from 'native-base';
+import {Collapse,CollapseHeader,CollapseBody} from 'accordion-collapse-react-native';
+import Icon from 'react-native-ionicons';
+
+export default class Preffered_sports extends Component {
+static navigationOptions = {
+       header: null,
+    };
+  constructor(props) {
+    super(props);
+    this.state = {
+    }
+  }
+
+
+  render() {
+    return (
+      <SafeAreaView style={styles.container}>
+       
+                  <Text style={styles.headerText}>Preferred Sports</Text>
+                  <Text style={styles.subHeaderText}>dummy text of printing and typesetting industry.Lorem 
+                        has been the indutry's standard dummy text</Text>
+                 
+                  <Item regular style={styles.searchBar}>
+                        <Input placeholder="Search by Sports" style={styles.searchText}/>
+                        <TouchableOpacity onPress={() => this.props.navigation.navigate('')}>
+                          <Image
+                          style={styles.searchImg}
+                          source={require('.././images/search-icon.png')} />
+                                        
+                        </TouchableOpacity >
+
+                  </Item>
+                  <View style={styles.accordionContainer}>
+                      <Collapse>                    
+                            <CollapseHeader style={styles.accHeader}>
+                              <View>
+                                <Text style={styles.accHeaderText}>Popular Sports</Text>
+                              </View>
+                              <View style={styles.iconContainer}>
+                                <Image
+                                    style={styles.dropdownImg}
+                                    source={require('.././images/black-downarrow.png')} />  
+                              </View>
+                            </CollapseHeader>
+                            <CollapseBody >
+                                <View style={{flexDirection: 'row',marginLeft:'auto'}} >
+                                    <CheckBox
+                                      value={this.state.checked2}
+                                      onValueChange={() => this.setState({ checked2: !this.state.checked2 })} />
+                                    <Text style={styles.selectText}>Select All</Text>
+                                </View>
+                                <View style={styles.accBody}>
+                                      <View style={styles.inlineWrapper}>
+                                            <View style={styles.itemWrapper}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/badminton.png')} /> 
+                                                <Text style={styles.bodyText}>Badminton</Text>
+                                            </View>
+                                            <View style={styles.itemWrapper}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/cricket.png')} /> 
+                                                  <Text style={styles.bodyText}>Cricket</Text>
+                                            </View>
+                                            <View style={styles.itemWrapper}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/table-tennis.png')} /> 
+                                                <Text style={styles.bodyText}>Table Tennis</Text>
+                                            </View>
+                                            <View style={styles.itemWrapper}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/running.png')} /> 
+                                                  <Text style={styles.bodyText}>Running</Text>
+                                            </View>
+                                      </View>
+                                      <View style={styles.inlineWrapper}>
+                                            <View style={styles.itemWrapper2}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/foot-ball.png')} /> 
+                                                  <Text style={styles.bodyText}>Football</Text>
+                                            </View>
+                                            <View style={styles.itemWrapper2}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/tennis.png')} /> 
+                                                  <Text style={styles.bodyText}>Tennis</Text>
+                                            </View>
+                                            <View style={styles.itemWrapper2}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/basket-ball.png')} /> 
+                                                  <Text style={styles.bodyText}>Basket Ball</Text>
+                                            </View>
+                                            <View style={styles.itemWrapper2}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/cycling.png')} /> 
+                                                  <Text style={styles.bodyText}>Cycling</Text>
+                                            </View>
+                                            
+                                      </View>
+                                </View>
+                            </CollapseBody>
+                      </Collapse>
+                </View>
+                <View style={styles.accordionContainer}>
+                      <Collapse>                    
+                            <CollapseHeader style={styles.accHeader}>
+                              <View>
+                                <Text style={styles.accHeaderText}>Team Sports</Text>
+                              </View>
+                              <View style={styles.iconContainer}>
+                                <Image
+                                    style={styles.dropdownImg}
+                                    source={require('.././images/black-downarrow.png')} />  
+                              </View>
+                            </CollapseHeader>
+                            <CollapseBody >
+                                <View style={{flexDirection: 'row',marginLeft:'auto'}} >
+                                    <CheckBox
+                                      value={this.state.checked2}
+                                      onValueChange={() => this.setState({ checked2: !this.state.checked2 })} />
+                                    <Text style={styles.selectText}>Select All</Text>
+                                </View>
+                                <View style={styles.accBody}>
+                                      <View style={styles.inlineWrapper}>
+                                            
+                                            <View style={styles.itemWrapper}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/cricket.png')} /> 
+                                                  <Text style={styles.bodyText}>Cricket</Text>
+                                            </View>
+                                            <View style={styles.itemWrapper}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/basket-ball.png')} /> 
+                                                <Text style={styles.bodyText}>Basket Ball</Text>
+                                            </View>
+                                            
+                                      </View>
+                                      <View style={styles.inlineWrapper}>
+                                            <View style={styles.itemWrapper2}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/foot-ball.png')} /> 
+                                                  <Text style={styles.bodyText}>Football</Text>
+                                            </View>
+                                                                                                                                                                              
+                                      </View>
+                                </View>
+                            </CollapseBody>
+                      </Collapse>
+                </View>
+                <View style={styles.accordionContainer}>
+                      <Collapse>                    
+                            <CollapseHeader style={styles.accHeader}>
+                              <View>
+                                <Text style={styles.accHeaderText}>Racquet Sports</Text>
+                              </View>
+                              <View style={styles.iconContainer}>
+                                <Image
+                                    style={styles.dropdownImg}
+                                    source={require('.././images/black-downarrow.png')} />  
+                              </View>
+                            </CollapseHeader>
+                            <CollapseBody >
+                                <View style={{flexDirection: 'row',marginLeft:'auto'}} >
+                                    <CheckBox
+                                      value={this.state.checked2}
+                                      onValueChange={() => this.setState({ checked2: !this.state.checked2 })} />
+                                    <Text style={styles.selectText}>Select All</Text>
+                                </View>
+                                <View style={styles.accBody}>
+                                      <View style={styles.inlineWrapper}>
+                                            <View style={styles.itemWrapper}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/badminton.png')} /> 
+                                                <Text style={styles.bodyText}>Badminton</Text>
+                                            </View>
+                                      </View>
+                                      <View style={styles.inlineWrapper}>
+                                           
+                                            <View style={styles.itemWrapper2}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/tennis.png')} /> 
+                                                  <Text style={styles.bodyText}>Tennis</Text>
+                                            </View>
+                                            
+                                      </View>
+                                </View>
+                            </CollapseBody>
+                      </Collapse>
+                </View>
+                  <View style={styles.accordionContainer}>
+                      <Collapse>                    
+                            <CollapseHeader style={styles.accHeader}>
+                              <View>
+                                <Text style={styles.accHeaderText}>Fitness Sports</Text>
+                              </View>
+                              <View style={styles.iconContainer}>
+                                <Image
+                                    style={styles.dropdownImg}
+                                    source={require('.././images/black-downarrow.png')} />  
+                              </View>
+                            </CollapseHeader>
+                            <CollapseBody >
+                                <View style={{flexDirection: 'row',marginLeft:'auto'}} >
+                                    <CheckBox
+                                      value={this.state.checked2}
+                                      onValueChange={() => this.setState({ checked2: !this.state.checked2 })} />
+                                    <Text style={styles.selectText}>Select All</Text>
+                                </View>
+                                <View style={styles.accBody}>
+                                      <View style={styles.inlineWrapper}>
+                                            <View style={styles.itemWrapper}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/running.png')} /> 
+                                                  <Text style={styles.bodyText}>Running</Text>
+                                            </View>
+                                      </View>
+                                      <View style={styles.inlineWrapper}>
+                                            <View style={styles.itemWrapper2}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/cycling.png')} /> 
+                                                  <Text style={styles.bodyText}>Cycling</Text>
+                                            </View>
+                                            
+                                      </View>
+                                </View>
+                            </CollapseBody>
+                      </Collapse>
+                </View>
+                  <View style={styles.accordionContainer}>
+                      <Collapse>                    
+                            <CollapseHeader style={styles.accHeader}>
+                              <View>
+                                <Text style={styles.accHeaderText}>Recreation Sports</Text>
+                              </View>
+                              <View style={styles.iconContainer}>
+                                <Image
+                                    style={styles.dropdownImg}
+                                    source={require('.././images/black-downarrow.png')} />  
+                              </View>
+                            </CollapseHeader>
+                            <CollapseBody >
+                                <View style={{flexDirection: 'row',marginLeft:'auto'}} >
+                                    <CheckBox
+                                      value={this.state.checked2}
+                                      onValueChange={() => this.setState({ checked2: !this.state.checked2 })} />
+                                    <Text style={styles.selectText}>Select All</Text>
+                                </View>
+                                <View style={styles.accBody}>
+                                      <View style={styles.inlineWrapper}>
+                                            <View style={styles.itemWrapper}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/running.png')} /> 
+                                                  <Text style={styles.bodyText}>Running</Text>
+                                            </View>
+                                      </View>
+                                      <View style={styles.inlineWrapper}>
+                                            <View style={styles.itemWrapper2}>
+                                                <Image
+                                                  style={styles.sportIconImg}
+                                                  source={require('.././images/cycling.png')} /> 
+                                                  <Text style={styles.bodyText}>Cycling</Text>
+                                            </View>
+                                            
+                                      </View>
+                                </View>
+                            </CollapseBody>
+                      </Collapse>
+                </View>
+
+                <View style={styles.signInBtn}>
+                      <TouchableOpacity onPress={() => this.props.navigation.navigate('Profile')}>
+                            <Text style={styles.signInBtnText}>SAVE</Text>
+                      </TouchableOpacity>
+                </View>
+         
+        
+       
+
+      </SafeAreaView>
+    );
+  }
+}
+
+const styles = StyleSheet.create({
+container: {
+    padding: 20,
+    flex: 1,
+    alignItems: 'stretch',
+  },
+headerText:
+  {
+    fontFamily:"TwCenMTStd",
+    fontSize:24,
+    color:"#363f4d"
+  },
+subHeaderText:
+  {
+    fontFamily:"TwCenMTStd",
+    color:"#999999",
+    fontSize:16,
+  },
+searchBar:
+  {
+    borderWidth:1,
+    borderColor:"#d7d7d7",
+    marginTop:20,
+    borderRadius:5
+  },
+searchText:
+  {
+    fontSize:18,
+    color:"#999999",
+    fontFamily:"TwCenMTStd"
+  },
+accordionContainer:
+  {
+    marginTop:20,
+    padding:10,
+    borderColor:'#d7d7d7',
+    borderWidth: 1,
+    borderRadius:5
+  },
+accHeader:
+ {
+  flexDirection:"row",  
+ },
+iconContainer:
+  {
+    marginLeft:'auto',
+  },
+accHeaderText:
+  {
+    fontFamily:"TwCenMTStd",
+    fontSize:16,
+    color:"#363f4d",
+    marginLeft:5
+  },
+itemWrapper:
+  {
+    flexDirection:"row",
+    marginTop:10,
+     marginLeft:15
+  },
+  accBody:
+  {
+  flexDirection:"row",
+  },
+itemWrapper2:
+  {
+    flexDirection:"row",
+    marginLeft:30,
+    marginTop:10
+  },
+bodyText:
+  {
+    fontSize:14,
+    fontFamily:"TwCenMTStd",
+    marginLeft:5,
+    textAlign:"center",
+    color:"#999999"
+  },
+selectText:
+  {
+    fontSize:14,
+    fontFamily:"TwCenMTStd",
+    textAlign:"center",
+    color:"#999999",
+    marginTop:8
+  },
+
+inlineWrapper:
+  {
+    flexDirection:"column",
+   
+  },
+
+signInBtn:
+  {   
+    backgroundColor:"#33cbf6",
+    borderRadius:5,
+    marginTop:20,
+    marginBottom:20  
+  },
+signInBtnText:
+  {
+    fontSize:20 ,
+    color:'#fff',
+    textAlign:"center",
+    padding:5,
+    fontFamily:"TwCenMTStd"
+  },
+  searchImg:
+  {
+    width:20,
+    height:20,
+    marginRight:10
+  },
+dropdownImg:
+{
+  width:15,
+  height:15,
+  marginRight:5
+},
+sportIconImg:
+{
+  width:15,
+  height:15,
+}
+});
+
diff --git a/src/components/Profile.js b/src/components/Profile.js
new file mode 100644
index 0000000000000000000000000000000000000000..feb92b476d841ff86acdb99586a1be6f7cb70bd0
--- /dev/null
+++ b/src/components/Profile.js
@@ -0,0 +1,405 @@
+import React, {Component} from 'react';
+import {Platform, StyleSheet,TouchableOpacity,TouchableHighlight, Text, View,Button,Image,ScrollView} from 'react-native';
+import Icon from 'react-native-ionicons';
+
+
+export default class Profile extends Component {
+    static navigationOptions = {
+       header: null,
+    };
+  render() {
+    return (
+      <View style={styles.container}>
+              <View style={styles.cartHeader}>
+                    
+                    <View style={styles.profileView}>
+                          <Text style={styles.profileText}>Rasoolpura</Text>
+                          <View style={[styles.iconContainer,{marginLeft:5}]}>
+                              <Image
+                                style={styles.locationImg}
+                                source={require('.././images/location-checked.png')} />
+                          </View>
+                    </View>
+                    
+                    <View style={{marginLeft:'auto',flexDirection:"row",marginRight:15}}>
+                        <View style={styles.iconContainer}>
+                              <TouchableOpacity onPress={() => this.props.navigation.navigate('create_Activity')}>                  
+                                   <Image
+                                  style={styles.locationImg}
+                                  source={require('.././images/create-activity.png')} />
+                              </TouchableOpacity>
+                        </View>
+                        <View style={styles.iconContainer}>
+                              <TouchableOpacity onPress={() => this.props.navigation.navigate('')}>                  
+                                   <Image
+                                  style={styles.locationImg}
+                                  source={require('.././images/chat-icon.png')} />
+                              </TouchableOpacity>
+                        </View>
+                        <View style={styles.iconContainer}>
+                              <TouchableOpacity onPress={() => this.props.navigation.navigate('')}>                  
+                                   <Image
+                                  style={styles.locationImg}
+                                  source={require('.././images/notification-icon.png')} />
+                              </TouchableOpacity>
+                        </View>
+                    </View>                       
+              </View>
+              <View style={{flexDirection:"row",backgroundColor:"#6ad5f3"}}>                  
+                    <View style={styles.headerWrapper}>  
+                        <Text style={styles.headerText}>My Activities</Text>
+                        
+                    </View>
+                    <View style={[styles.headerWrapper,{ borderBottomWidth: 0}]}>
+                        <TouchableHighlight onPress={() => this.props.navigation.navigate('')}>  
+                            <View style={{flexDirection:"row"}}>
+                              <Text style={[styles.headerText,{ color:"#daf3fb"}]}>My Sports</Text>
+                              
+                           </View>
+                        </TouchableHighlight>
+                    </View>
+                    <View style={[styles.headerWrapper,{ borderBottomWidth: 0}]}>
+                        <TouchableHighlight onPress={() => this.props.navigation.navigate('')}>  
+                            <View style={{flexDirection:"row"}}>
+                              <Text style={[styles.headerText,{ color:"#daf3fb"}]}>Other Sports</Text>
+                              
+                           </View>
+                        </TouchableHighlight>
+                    </View>                                                               
+              </View>
+              <View style={styles.upcomingWrapper}>
+                  <Text style={styles.upcomingText}>Upcoming Activities</Text>
+                  <View style={styles.signInBtn}>
+                            <TouchableOpacity>
+                                  <Text style={styles.signInBtnText}>See all</Text>
+                            </TouchableOpacity>
+                  </View>
+              </View>
+              <View style={styles.listBody}>
+                    <View style={{flexDirection:"row",marginBottom:10}}>
+                        <View style={styles.dateContent}>
+                              <Text style={styles.dateText}>19 Apr</Text>
+                              <Text style={styles.monthText}>Fri,2019</Text>
+                        </View>
+                        <View style={styles.typeContent}>
+                              <Text style={styles.dateText}>Cricket</Text>
+                              <View style={{flexDirection:"row",marginTop:5}}>
+                                    <Image
+                                    style={styles.smallLocationImg}
+                                    source={require('.././images/timer-icon.png')} />
+                                    <Text style={styles.areaText}>Morning</Text>
+                              </View>
+                        </View>
+                        <View style={styles.areaContent}>
+                              <Text style={styles.dateText}> </Text>
+                              <View style={{flexDirection:"row",marginTop:5}}>
+                                    <Image
+                                    style={styles.smallLocationImg}
+                                    source={require('.././images/location-small.png')} />
+                                    <Text style={styles.areaText}>Rasoolpura</Text>
+                              </View>
+                        </View>
+                    </View>
+                    <View style={{flexDirection:"row",marginTop:10}}>
+                              <Image
+                                      style={styles.profileImg}
+                                      source={require('.././images/3.jpg')}
+                              /> 
+                              <View style={styles.titleContent}>
+                                    <Text style={styles.titleText}>Neeraja</Text>
+                                    <Text style={styles.underlineText}>Intermediate</Text>
+                              </View>
+                              <View style={styles.goingContent}>
+                                  <View style={{marginLeft:'auto'}}>
+                                             <Image
+                                            style={styles.goingImg}
+                                            source={require('.././images/going-icon.png')} />                                                                                                               
+                                  </View>
+                                  <Text style={styles.goingText}>20 going</Text>
+
+                              </View>
+                    </View>
+            </View>
+              <View style={styles.listBody}>
+                    <View style={{flexDirection:"row",marginBottom:10}}>
+                        <View style={styles.dateContent}>
+                              <Text style={styles.dateText}>20 Apr</Text>
+                              <Text style={styles.monthText}>Sat,2019</Text>
+                        </View>
+                        <View style={styles.typeContent}>
+                              <Text style={styles.dateText}>Tennis</Text>
+                              <View style={{flexDirection:"row",marginTop:5}}>
+                                    <Image
+                                    style={styles.smallLocationImg}
+                                    source={require('.././images/timer-icon.png')} />
+                                    <Text style={styles.areaText}>Evening</Text>
+                              </View>
+                        </View>
+                        <View style={styles.areaContent}>
+                              <Text style={styles.dateText}> </Text>
+                              <View style={{flexDirection:"row",marginTop:5}}>
+                                    <Image
+                                    style={styles.smallLocationImg}
+                                    source={require('.././images/location-small.png')} />
+                                    <Text style={styles.areaText}>Rasoolpura</Text>
+                              </View>
+                        </View>
+                    </View>
+                    <View style={{flexDirection:"row",marginTop:10}}>
+                              <Image
+                                      style={styles.profileImg}
+                                      source={require('.././images/3.jpg')}
+                              /> 
+                              <View style={styles.titleContent}>
+                                    <Text style={styles.titleText}>Parvathi</Text>
+                                    <Text style={styles.underlineText}>Beginner</Text>
+                              </View>
+                              <View style={styles.goingContent}>
+                                  <View style={{marginLeft:'auto'}}>
+                                             <Image
+                                            style={styles.goingImg}
+                                            source={require('.././images/lock-icon.png')} />                                                                                                               
+                                  </View>
+
+                              </View>
+                    </View>
+            </View>
+              <View style={styles.listBody}>
+                    <View style={{flexDirection:"row",marginBottom:10}}>
+                        <View style={styles.dateContent}>
+                              <Text style={styles.dateText}>21 Apr</Text>
+                              <Text style={styles.monthText}>Sun,2019</Text>
+                        </View>
+                        <View style={styles.typeContent}>
+                              <Text style={styles.dateText}>Cricket</Text>
+                              <View style={{flexDirection:"row",marginTop:5}}>
+                                    <Image
+                                    style={styles.smallLocationImg}
+                                    source={require('.././images/timer-icon.png')} />
+                                    <Text style={styles.areaText}>Morning</Text>
+                              </View>
+                        </View>
+                        <View style={styles.areaContent}>
+                              <Text style={styles.dateText}> </Text>
+                              <View style={{flexDirection:"row",marginTop:5}}>
+                                    <Image
+                                    style={styles.smallLocationImg}
+                                    source={require('.././images/location-small.png')} />
+                                    <Text style={styles.areaText}>Rasoolpura</Text>
+                              </View>
+                        </View>
+                    </View>
+                    <View style={{flexDirection:"row",marginTop:10}}>
+                              <Image
+                                      style={styles.profileImg}
+                                      source={require('.././images/3.jpg')}
+                              /> 
+                              <View style={styles.titleContent}>
+                                    <Text style={styles.titleText}>Neeraja</Text>
+                                    <Text style={styles.underlineText}>Intermediate</Text>
+                              </View>
+                              <View style={styles.goingContent}>
+                                  <View style={{marginLeft:'auto'}}>
+                                  <TouchableHighlight onPress={() => this.props.navigation.navigate('select_Sports')}>                                                         
+                                             <Image
+                                            style={styles.goingImg}
+                                            source={require('.././images/going-icon.png')} />                                                                                                               
+                                     </TouchableHighlight> 
+                                  </View>
+
+                                  <Text style={styles.goingText}>20 going</Text>
+                              </View>
+                    </View>
+            </View>
+               
+      </View>
+    
+    );
+  }
+}
+
+const styles = StyleSheet.create({
+container:{
+
+},
+locationImg:
+{
+  width:20,
+  height:20
+},
+smallLocationImg:
+{
+  width:12,
+  height:12,
+  marginTop:2
+},
+goingImg:
+{
+  width:15,
+  height:15,
+},
+profileImg:{
+    width:45,
+    height:45,
+    borderRadius:50
+  },
+  cartHeader:
+  {
+    flexDirection:"row",
+    padding:5,
+    backgroundColor:"#6ad5f3"
+  },
+  backImgView:
+  {
+    justifyContent: 'center',
+    alignItems: 'center',
+    flex:1,
+    marginLeft:10
+  },
+  iconImg:
+  {
+    width:60,
+    height:60,
+    borderRadius:50,  
+  },
+ profileView:
+  {
+    flexDirection:"row",  
+  },
+  profileText:
+  {
+    fontSize:20,
+    fontFamily:"TwCenMTStd",
+    color:"white",
+    marginLeft:10,
+    textAlignVertical:"center",
+  },
+  iconContainer:
+  {
+    justifyContent: 'center',
+    alignItems: 'center',
+    margin:10
+  },
+  headerWrapper:
+  {
+    flexDirection:"row",
+    justifyContent: 'center',
+    alignItems: 'center',
+    flex:1, 
+    borderColor: '#b9edfc',
+    borderBottomWidth: 3,
+    paddingBottom:3
+  },
+headerText:
+  {
+    fontSize: 16,
+    marginLeft:5,
+    fontFamily:"TwCenMTStd",
+    color:"white",    
+  },
+  upcomingWrapper:
+  {
+    flexDirection:"row",
+    marginTop:10
+  },
+  upcomingText:
+  {
+    color:"#363f4d",
+    fontSize:16,
+    fontFamily:"TwCenMTStd",
+    marginLeft:10
+  },
+  signInBtn:
+  {   
+    backgroundColor:"#5c9ef1",
+    borderRadius:10,
+    width:65,
+    marginLeft:'auto',
+    marginRight:10
+  },
+  signInBtnText:
+  {
+    fontSize:14 ,
+    color:'#fff',
+    textAlign:"center",
+    textAlignVertical:"center",
+    fontFamily:"TwCenMTStd"
+  },
+  listBody:
+  {
+    borderColor:"#C0C0C0",
+    elevation:1,
+    margin:10,
+    padding:10
+  },
+  dateText:
+  {
+    color:"#363f4d",
+    fontFamily:"TwCenMTStd",
+    fontSize:18,
+  },
+  monthText:
+  {
+    color:"#7f7f7f",
+    fontFamily:"TwCenMTStd",
+    fontSize:15,
+    marginTop:5
+    // marginLeft:5
+  },
+  areaText:
+  {
+    color:"#7f7f7f",
+    fontFamily:"TwCenMTStd",
+    fontSize:14,
+    marginLeft:5
+  },
+  goingText:
+  {
+    color:"#7f7f7f",
+    fontFamily:"TwCenMTStd",
+    fontSize:15,
+  },
+  goingContent:
+  {
+    flexDirection:"column",
+    marginLeft:'auto',
+
+  },
+  dateContent:
+  {
+    flexDirection:"column",
+  },
+  typeContent:
+  {
+    flexDirection:"column",
+    marginLeft:20
+  },
+  areaContent:
+  {
+    flexDirection:"column",
+    marginLeft:20
+  },
+  titleText:
+  {
+    color:"#363f4d",
+    fontSize:18,
+    fontFamily:"TwCenMTStd",
+  },
+  titleContent:
+  {
+    flexDirection:"column",
+    marginLeft:10
+  },
+  underlineText:
+  {
+    color:"#33cbf6",
+    fontFamily:"TwCenMTStd",
+    fontSize:13,
+    color :'skyblue',
+    borderBottomWidth:0.65,
+    borderColor:"#33cbf6"
+  },
+
+});
+
+
diff --git a/src/components/Splashscreen.js b/src/components/Splashscreen.js
new file mode 100644
index 0000000000000000000000000000000000000000..063d159443df58c9022d2f45271790bc98e09160
--- /dev/null
+++ b/src/components/Splashscreen.js
@@ -0,0 +1,198 @@
+import React from 'react';
+import { Text, Dimensions, Image, StyleSheet, View,TouchableOpacity } from 'react-native';
+import SwiperFlatList from 'react-native-swiper-flatlist';
+
+class SplashScreen extends React.Component {
+  render() {
+    const viewStyles = [styles.container, { backgroundColor: '#3DBEF5' }];
+    const textStyles = {
+      color: 'white',
+      fontSize: 50,
+      fontWeight: 'bold'
+    };
+
+    return (
+      <View style={viewStyles}>
+        <Text style={textStyles}>
+          PLAYARD
+        </Text>
+      </View>
+    );
+  }
+}
+
+export default class App extends React.Component {
+  static navigationOptions = {
+       header: null,
+    };
+  constructor(props) {
+    super(props);
+
+    this.state = { isLoading: true }
+  }
+
+  performTimeConsumingTask = async() => {
+    return new Promise((resolve) =>
+      setTimeout(
+        () => { resolve('result') },
+        3000
+      )
+    );
+  }
+
+  async componentDidMount() {
+    // Preload data from an external API
+    // Preload data using AsyncStorage
+    const data = await this.performTimeConsumingTask();
+
+    if (data !== null) {
+      this.setState({ isLoading: false });
+    }
+  }
+
+  render() {
+    if (this.state.isLoading) {
+      return <SplashScreen />;
+    }
+
+    return (
+    <View>
+        <View style={styles.container1}>
+          <SwiperFlatList
+            autoplay
+            autoplayDelay={4}
+            autoplayLoop
+            index={2}
+            showPagination
+          >
+            <View style={{ backgroundColor: 'white' }}>
+              <Image
+                style={styles.Img}
+                source={require('.././images/play1.png')}
+              />
+              <Text style={styles.headerText3}>Meet Players</Text>
+              <Text style={styles.headerText4}>Don't miss out on a game.Find new Players near you</Text>
+              <TouchableOpacity onPress={() => this.props.navigation.navigate('Prefferedsports')}>
+                <Text style={styles.headerText5}>Skip</Text>
+              </TouchableOpacity>
+            </View>
+            <View style={{ backgroundColor: 'white' }}>
+              <Image
+                style={styles.Img}
+                source={require('.././images/play2.png')}
+              />
+              <Text style={styles.headerText3}>Engage Your Group</Text>
+              <Text style={styles.headerText4}>No more hassles of getting a head count,manage your</Text>
+              <Text style={styles.headerText4}>groups hassle free</Text>
+              <TouchableOpacity onPress={() => this.props.navigation.navigate('Signup')}>
+                <Text style={styles.headerText5}>Skip</Text>
+              </TouchableOpacity>
+
+            </View>
+            <View style={{ backgroundColor: 'white' }}>
+              <Image
+                style={styles.Img}
+                source={require('.././images/sports1.png')}
+              />
+              <Text style={styles.headerText3}>Discover Something Everyday</Text>
+              <Text style={styles.headerText4}>Book Venues,experiences & events,find academics.</Text>
+              <Text style={styles.headerText4}>We have your week sorted</Text>
+
+              <View style={{flexDirection:"row"}}>
+                  <View style={styles.Btn}>
+                    <TouchableOpacity onPress={() => this.props.navigation.navigate('Signin')}>
+                      <Text style={styles.headerText1}>SIGN IN</Text> 
+                    </TouchableOpacity>                            
+                  </View> 
+                  <View style={styles.Btn}>
+                    <TouchableOpacity onPress={() => this.props.navigation.navigate('Signup')}>
+                      <Text style={styles.headerText1}>SIGN UP</Text> 
+                    </TouchableOpacity>                            
+                  </View>
+                 
+              </View>
+            </View>
+            
+          </SwiperFlatList>
+        
+        </View>
+        
+    </View>
+    );
+  }
+}
+const { width, height } = Dimensions.get('window');
+const styles = StyleSheet.create({
+  container: {
+    flex: 1,
+    justifyContent: 'center',
+    alignItems: 'center'
+
+  },
+  container2: {
+    justifyContent: 'center',
+    alignItems: 'center',
+    flexDirection:"row",
+  
+  },
+  container1: {
+    backgroundColor: 'white',
+    height:600,
+    paddingTop:10,
+    marginTop:10,
+  },
+
+  Btn:
+  { 
+    height:40,
+    borderRadius:5,
+    marginTop:30,
+    backgroundColor:"#3DBEF5",
+    width:150,
+    marginLeft:20,
+
+  },
+  headerText1:
+  {
+    fontSize:15 ,
+    color:'#fff',
+    textAlign:"center",
+    paddingTop:10,
+  },
+  headerText3:
+  {
+    fontSize:19 ,
+    color:'#000000',
+    textAlign:"center",
+    paddingTop:30
+  },
+  headerText2:
+  {
+    color:'#109BD7',
+  
+  },
+  headerText4:
+  {
+    fontSize:13 ,
+    color:'#000000',
+    textAlign:"center",
+    paddingTop:8
+  },
+  headerText5:
+  {
+    fontSize:15 ,
+    color:'#000000',
+    textAlign:"center",
+    paddingTop:60
+  },
+
+  Img:
+  {
+  width: 340,
+  height: 320,
+  borderRadius:10,
+  margin:10,
+  borderColor: 'gray',
+  borderWidth: 1
+  }
+});
diff --git a/src/components/create_Activity.js b/src/components/create_Activity.js
new file mode 100644
index 0000000000000000000000000000000000000000..2f490ffb8ab5094c25d59ef59b3be872c5c898ba
--- /dev/null
+++ b/src/components/create_Activity.js
@@ -0,0 +1,233 @@
+import React from 'react';
+import { StyleSheet, Text,TextInput,TouchableOpacity,TouchableHighlight,ScrollView,SafeAreaView,Image,View } from 'react-native';
+import Icon from 'react-native-ionicons';
+import {Item,Input,Picker} from 'native-base';
+import SwitchToggle from 'react-native-switch-toggle';
+
+
+export default class create_Activity extends React.Component {
+static navigationOptions = {
+       header: null,
+    };
+  constructor(props) 
+  {
+    super(props);
+    this.state = 
+            {            
+              selected: "key1",
+              switchOn1: false,
+            };
+
+  }
+
+onValueChange(value: string) {
+    this.setState({
+      selected: value
+    });
+  }
+  onPress1 = () => {
+    this.setState({ switchOn1: !this.state.switchOn1 });
+  }
+    change(value) {
+    this.setState(() => {
+      return {
+        value: parseFloat(value),
+      };
+    });
+  }
+
+ render() 
+ {
+   return(
+    < SafeAreaView >
+                  <View style={styles.cartHeader}>
+                      <TouchableOpacity onPress={() => this.props.navigation.navigate('Profile')}>                  
+
+                           <Image
+                          style={styles.searchImg}
+                          source={require('.././images/back-arrow-white.png')} />
+                      </TouchableOpacity>
+                      <Text style={styles.profileText}>Create Activity</Text>                                     
+                  </View>
+                  <View style={styles.contentBody}>
+                      <View style={styles.itemWrapper}>
+                             <Text style={styles.selectSport}>Select Sport</Text>
+                            <View style={styles.textWrapper}>
+                                <Text style={styles.accHeaderText}>Eg: Cricket / Boxing</Text>
+                                <View style={{marginLeft:"auto"}}>
+                                      <TouchableHighlight onPress={() => this.props.navigation.navigate('select_Sports')}>                                                         
+                                             <Image
+                                            style={styles.rightImg}
+                                            source={require('.././images/black-rightarrow.png')} />                                                                                                               
+                                     </TouchableHighlight>  
+                                </View>
+                            </View>
+                      </View>
+                      <View style={styles.itemWrapper}>
+                             <Text style={styles.selectSport}>Area/ Location</Text>
+                            <View style={styles.textWrapper}>
+                                <Text style={styles.accHeaderText}>Locality or venue name</Text>
+                                <View style={{marginLeft:"auto"}}>
+                                      <TouchableHighlight onPress={() => this.props.navigation.navigate('select_Location')}>                                                         
+                                             <Image
+                                            style={styles.rightImg}
+                                            source={require('.././images/black-rightarrow.png')} />                                                                                                               
+                                     </TouchableHighlight>  
+                                </View>
+                            </View>
+                      </View>
+                      <View style={styles.itemWrapper}>
+                             <Text style={styles.selectSport}>Date</Text>
+                            <View style={styles.textWrapper}>
+                                <Text style={styles.accHeaderText}>Select Date</Text>
+                                <View style={{marginLeft:"auto"}}>
+                                      <TouchableHighlight onPress={() => this.props.navigation.navigate('select_Date')}>                                                         
+                                             <Image
+                                            style={styles.rightImg}
+                                            source={require('.././images/black-rightarrow.png')} />                                                                                                               
+                                     </TouchableHighlight>  
+                                </View>
+                            </View>
+                      </View>
+                      <View style={styles.itemWrapper}>
+                             <Text style={styles.selectSport}>Time</Text>
+                            <View style={styles.textWrapper}>
+                                <Text style={styles.accHeaderText}>Select flexible time slot</Text>
+                                <View style={{marginLeft:"auto"}}>
+                                      <TouchableHighlight onPress={() => this.props.navigation.navigate('select_Time')}>                                                         
+                                             <Image
+                                            style={styles.rightImg}
+                                            source={require('.././images/black-rightarrow.png')} />                                                                                                               
+                                     </TouchableHighlight>  
+                                </View>
+                            </View>
+                      </View>
+                      <Text style={styles.selectSport}>Activity Type</Text>
+                      <View style={styles.mobileText1}>                        
+                                  <Picker
+                                    note
+                                    mode="dropdown"                                    
+                                    selectedValue={this.state.selected}
+                                    style={{ fontFamily:'Lato-Medium',fontSize:20}}
+                                    onValueChange={this.onValueChange.bind(this)}
+                                  >
+                                    <Picker.Item label="Select Activity Type" value="key0" />
+                                    <Picker.Item label="Beginner" value="key1" />
+                                    <Picker.Item label="Amateur" value="key2" />
+                                    <Picker.Item label="Intermediate" value="key3" />
+                                    <Picker.Item label="Advanced" value="key4" />
+                                    <Picker.Item label="Professional" value="key5" />
+                                    
+                                  </Picker>
+                        </View>
+                        <Text style={styles.accHeaderText}>Notify friends</Text>
+                        <View style={{marginLeft:"auto",}}>
+                           
+                        </View>
+
+                        <View style={styles.signInBtn}>
+                              <TouchableOpacity onPress={() => this.props.navigation.navigate('Profile')}>
+                                    <Text style={styles.signInBtnText}>Create Activity</Text>
+                              </TouchableOpacity>
+                        </View>
+
+
+                  </View>  
+
+    </SafeAreaView>
+     
+   );
+ }
+}
+const styles = StyleSheet.create({
+  cartHeader:
+  {
+    flexDirection:"row",
+    backgroundColor:"#33cbf6",
+    padding:15
+  },
+  searchImg:
+  {
+    width:20,
+    height:20,
+  },
+  rightImg:
+  {
+    width:15,
+    height:15,
+  },
+
+  profileText:
+  {
+    fontSize:20,
+    fontFamily:"TwCenMTStd",
+    color:"white",
+    marginLeft:10,
+    textAlignVertical:"center",
+  },
+  iconContainer:
+  {
+    justifyContent: 'center',
+    alignItems: 'center',
+    margin:15
+  },
+  accHeaderText:
+  {
+    fontFamily:"TwCenMTStd",
+    fontSize:17,
+    color:"#363f4d",
+  },
+  rightIconContainer:
+  {
+    marginLeft:'auto'
+  },
+  textWrapper:
+  {
+    flexDirection:"row",
+    borderBottomWidth:1,
+    borderColor:"#dadada",
+    paddingBottom:5,
+    
+  },
+  selectSport:
+  {
+    fontSize:16,
+    fontFamily:"TwCenMTStd",
+    marginBottom:5,
+    color:"#7f7f7f"
+  },
+  contentBody:
+  {
+    padding:20
+  },
+  itemWrapper:
+  {
+    marginBottom:25
+  },
+  mobileText1:
+  {
+    borderColor: '#ddd',
+    borderBottomWidth: 1,
+    marginBottom:30,
+    fontFamily:"Lato-Medium",
+  },
+  signInBtn:
+  {   
+    backgroundColor:"#3DBEF5",
+    borderRadius:5,
+    marginTop:40,
+    marginLeft:20,
+    marginRight:20
+  },
+  signInBtnText:
+  {
+    fontSize:20 ,
+    color:'#fff',
+    textAlign:"center",
+    padding:10,
+    fontFamily:"TwCenMTStd"
+  },
+
+});
+
+
diff --git a/src/components/forgotPassword.js b/src/components/forgotPassword.js
new file mode 100644
index 0000000000000000000000000000000000000000..4e9fdb9a0ff1deae745156f04a41f4abee5bb740
--- /dev/null
+++ b/src/components/forgotPassword.js
@@ -0,0 +1,201 @@
+import React from 'react';
+import { StyleSheet, Text,TextInput,TouchableOpacity,TouchableHighlight,ScrollView,Image,View } from 'react-native';
+import Icon from 'react-native-ionicons';
+import AsyncStorage from '@react-native-community/async-storage';
+import {    Picker  } from 'native-base';
+
+
+export default class forgotPassword extends React.Component {
+  static navigationOptions = {
+       header: null,
+    };
+  constructor(props) 
+  {
+    super(props);
+      this.state = 
+            {
+              mobileNumber: '', 
+              deviceType:'android',
+              deviceToken:'Testing',
+              regType:'direct',
+               selected: "key1"
+            };
+
+  }
+    onValueChange(value: string) {
+    this.setState({
+      selected: value
+    });
+  }
+
+  forgot_pwd = async () => 
+    {
+        await AsyncStorage.setItem('@forgotpwd_number',this.state.mobileNumber)
+        console.log(this.state.mobileNumber);
+        
+        let formData = new FormData();
+        formData.append('mobileNumber', this.state.mobileNumber);
+        formData.append('deviceType', this.state.deviceType);
+        formData.append('deviceToken', this.state.deviceToken);
+        formData.append('regType', this.state.regType);
+        let data = {
+            method: 'POST',
+            headers: {
+                'Accept': 'application/json',
+                "Content-Type": "multipart/form-data",
+            },
+            body: formData
+        }
+        fetch("http://testingmadesimple.org/playard/api/service/forgotpassword", data)
+        .then(response => response.json())
+        .then(responseJson => 
+         { 
+                  if(responseJson.status == ("1"))
+                   {
+                      // alert("otp sent to your mobile number ");
+                      this.props.navigation.navigate("Otp_reset");
+                       this.setState({
+                                  mobileNumber: '',                                 
+                                })  
+                    }
+                    else if(responseJson.status == ("0"))
+                    {
+                        alert("Required fields are missing");
+                    }
+                    else if(responseJson.status == ("2"))
+                    {
+                        alert("Mobile Number doesn't exists with us");
+                    }
+                    else
+                    {
+                      alert("Your account have been suspened by admin,Please contact Admin to activate your account.");
+
+                    }
+                    
+                   console.log('response:', responseJson)
+          }
+
+        )
+
+        .catch(error => console.error(error));
+        console.log(data)
+        console.log(this.state)
+    }
+
+ render() 
+ {
+   return(
+      <View style={{flex:1}}>
+               <ScrollView>
+                  <View style={styles.container}>
+                      <View style={styles.backArrowView}>
+                            <Icon name='arrow-back' size={24} color={'black'}  onPress={() => this.props.navigation.navigate('signIn')}
+                            />
+                      </View> 
+                      <View style={{marginBottom:60}}>
+                            <Text style={styles.signInText}>FORGOT</Text>
+                            <Text style={styles.signInText}>PASSWORD</Text>
+                      </View>
+                      <Text style={styles.forgotText}>Please enter your registered mobile </Text>                
+                      <Text style={styles.forgotText}> number and OTP will be send</Text>
+                      <View style={styles.mobileWrapper}>
+                              <View style={styles.mobileText1}>                        
+                                    <Picker
+                                      note
+                                      mode="dropdown"
+                                      
+                                      selectedValue={this.state.selected}
+                                      onValueChange={this.onValueChange.bind(this)}
+                                    >
+                                      <Picker.Item label="IND +91" value="key0" />
+                                      <Picker.Item label="IND +91" value="key1" />
+                                      <Picker.Item label="UK +44" value="key2" />
+                                      
+                                    </Picker>
+                                </View>
+                                <Text style={{width:"3%"}}></Text>
+                                <TextInput
+                                  placeholder="Mobile Number"
+                                  keyboardType={'phone-pad'}
+                                  style={styles.mobileText2}
+                                  maxLength={10}
+                                  onChangeText={(text) => this.setState({mobileNumber:text})}
+                                  value={this.state.mobileNumber}
+                                />
+                      </View>
+                                 
+                      <View style={styles.signInBtn}>
+                            <TouchableOpacity onPress={this.forgot_pwd}>
+                                  <Text style={styles.signInBtnText}>SEND</Text>
+                            </TouchableOpacity>
+                      </View>
+                    
+                </View>
+          </ScrollView>
+               
+      </View>
+   );
+ }
+}
+const styles = StyleSheet.create({
+  container: 
+  {
+    padding:30 
+  },
+  signInText:
+  {
+    fontSize:25,
+    color:"#363f4d",
+    fontFamily:"TwCenMTStd-Bold",
+  },
+  backArrowView:
+  {
+    marginBottom:10
+  },
+
+  forgotText:
+  {
+    fontSize:18,
+    color:"#7f7f7f",
+    fontFamily:"TwCenMTStd",
+    textAlign:"center",
+    marginBottom:10
+  },
+  signInBtn:
+  {   
+    backgroundColor:"#33cbf6",
+    borderRadius:5,
+  },
+  signInBtnText:
+  {
+    fontSize:20 ,
+    color:'#fff',
+    textAlign:"center",
+    padding:5,
+    fontFamily:"TwCenMTStd"
+  },
+  mobileWrapper:
+  {
+    flexDirection:"row",
+    width:"100%",
+    marginTop:20,
+    marginBottom:50
+  },
+  mobileText1:
+  {
+    borderColor: '#ddd',
+    borderBottomWidth: 1,
+    fontFamily:"Lato-Medium",
+    width:"40%",
+  },
+  mobileText2:
+  {
+    borderColor: '#dadada',
+    fontSize:18,
+    borderBottomWidth: 1,
+    width:"57%",
+    fontFamily:"TwCenMTStd",
+  }, 
+  
+
+});
diff --git a/src/components/resetPassword.js b/src/components/resetPassword.js
new file mode 100644
index 0000000000000000000000000000000000000000..a8d2a87e24699acfbc474c29ad90d2d33f93d26a
--- /dev/null
+++ b/src/components/resetPassword.js
@@ -0,0 +1,199 @@
+import React from 'react';
+import { StyleSheet, Text,TextInput,TouchableOpacity,TouchableHighlight,ScrollView,Image,View } from 'react-native';
+import Icon from 'react-native-ionicons';
+import AsyncStorage from '@react-native-community/async-storage';
+
+export default class resetPassword extends React.Component {
+  static navigationOptions = {
+       header: null,
+    };
+  constructor(props) 
+  {
+    super(props);
+      this.state = 
+            {
+              numberKey: '',
+              password: '',
+              confirmPassword: '',
+              deviceType:'android',
+              deviceToken:'Testing',
+              regType:'direct',
+            };
+
+  }
+  async getKey() {
+    try {
+      const value = await AsyncStorage.getItem('@forgotpwd_number');
+      this.setState({numberKey: value});
+      } 
+      catch (error) 
+      {
+      console.log("Error retrieving data" + error);
+    }
+  }
+  componentDidMount(){
+    this.getKey();
+}
+
+reset_pwd = () => {
+    const { password, confirmPassword } = this.state;
+     let reg3 = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,20}$/;
+       if(password=="")
+        {
+          this.setState({field:'Please enter Password'})          
+        }       
+        else if(reg3.test(password) === false)
+        {
+            this.setState({field:'Password should contain at least one numeric digit,one alphabet and length of 6-20'})
+            return false;
+        }
+        else
+        { 
+          this.setState({field:''}) 
+        }  
+    if (password !== confirmPassword) {
+        alert("Passwords doesn't match");
+    } 
+    else {
+
+     
+        let formData = new FormData();
+        formData.append('mobileNumber', this.state.numberKey);
+        formData.append('password', this.state.confirmPassword);
+        formData.append('deviceType', this.state.deviceType);
+        formData.append('deviceToken', this.state.deviceToken);
+        formData.append('regType', this.state.regType);
+        let data = {
+            method: 'POST',
+            headers: {
+                'Accept': 'application/json',
+                "Content-Type": "multipart/form-data",
+            },
+            body: formData
+        }
+        fetch("http://testingmadesimple.org/playard/api/service/resetpassword", data)
+        .then(response => response.json())
+        .then(responseJson => 
+         { 
+                  if(responseJson.status == ("1"))
+                   {
+                      alert("Reset Password successfully");
+                      this.props.navigation.navigate("signIn");
+                       this.setState({
+                                  password: '',
+                                  confirmPassword: '',                                 
+                                })  
+                    }
+                    else if(responseJson.status == ("2"))
+                    {
+                        alert("Failed");
+                    }
+                    else if(responseJson.status == ("3"))
+                    {
+                        alert("Mobile Number doesn't exists with us");
+                    }
+                    else
+                    {
+                      // alert("Wrong Otp");
+
+                    }
+                    
+                   console.log('response:', responseJson)
+          }
+
+        )
+
+        .catch(error => console.error(error));
+        console.log(data)
+        console.log(this.state)
+    }
+}
+  
+
+ render() 
+ {
+   return(
+      <View style={{flex:1}}>
+               <ScrollView>
+                  <View style={styles.container}>
+                     
+                      <View style={{marginBottom:60}}>
+                            <Text style={styles.signInText}>RESET</Text>
+                            <Text style={styles.signInText}>PASSWORD</Text>
+                      </View>
+
+                      <TextInput
+                            placeholder="Enter new password"
+                            style={styles.inputField}
+                            onChangeText={(text) => this.setState({password:text})}
+                            returnKeyType = { "next" }
+                            value={this.state.password}
+                            onSubmitEditing={() => { this.confirmPassword.focus(); }}
+                            blurOnSubmit={false}
+                      /> 
+                      <TextInput
+                            ref={(input) => { this.confirmPassword = input; }}
+                            placeholder="Re-enter password"
+                            style={styles.inputField}
+                            onChangeText={(text) => this.setState({confirmPassword:text})}
+                            returnKeyType = { "done" }
+                            value={this.state.confirmPassword}
+                      /> 
+                      <Text style={styles.errorText}>{this.state.field}</Text>                
+
+                      <View style={styles.signInBtn}>
+                            <TouchableOpacity onPress={()=>{this.reset_pwd()}}>
+                                  <Text style={styles.signInBtnText}>SEND</Text>
+                            </TouchableOpacity>
+                      </View>
+                    
+                </View>
+          </ScrollView>
+               
+      </View>
+   );
+ }
+}
+const styles = StyleSheet.create({
+  container: 
+  {
+    padding:30 
+  },
+  signInText:
+  {
+    fontSize:25,
+    color:"#363f4d",
+    fontFamily:"TwCenMTStd-Bold",
+  },
+  inputField:
+  {
+    borderColor: '#dadada',
+    borderBottomWidth: 1,
+    fontSize:18,
+    fontFamily:"TwCenMTStd",
+    marginBottom:20
+  },
+  signInBtn:
+  {   
+    backgroundColor:"#3DBEF5",
+    borderRadius:5,
+    marginTop:50
+  },
+  signInBtnText:
+  {
+    fontSize:20 ,
+    color:'#fff',
+    textAlign:"center",
+    padding:5,
+    fontFamily:"TwCenMTStd"
+  },
+  errorText:
+  {
+    marginLeft:'auto',
+    marginRight:20,
+    color:"red",
+    fontFamily:'Lato-Medium'
+  },
+
+
+});
diff --git a/src/components/select_Date.js b/src/components/select_Date.js
new file mode 100644
index 0000000000000000000000000000000000000000..c121833575748abb056b543172be019503da8838
--- /dev/null
+++ b/src/components/select_Date.js
@@ -0,0 +1,50 @@
+import React from 'react';
+import { StyleSheet, Text,TextInput,ProgressBarAndroid,TouchableOpacity,ScrollView,TouchableHighlight,Image,View } from 'react-native';
+import Icon from 'react-native-ionicons';
+
+
+export default class select_Date extends React.Component {
+static navigationOptions = {
+       header: null,
+    };     
+ render() 
+ {
+   return(
+    <View>
+              <View style={styles.cartHeader}>
+                      <TouchableOpacity onPress={() => this.props.navigation.navigate('create_Activity')}>                  
+                          <View style={styles.iconContainer}>
+                                  <Icon name='arrow-back' size={22} color={'white'} />
+                          </View>
+                      </TouchableOpacity>
+                      <Text style={styles.profileText}>Select Date</Text>                                     
+              </View>                   
+    </View>
+     
+   );
+ }
+}
+const styles = StyleSheet.create({
+   cartHeader:
+ {
+    flexDirection:"row",
+    backgroundColor:"#33cbf6"
+  },
+  profileText:
+  {
+    fontSize:20,
+    fontFamily:"TwCenMTStd",
+    color:"white",
+    marginLeft:10,
+    textAlignVertical:"center",
+  },
+  iconContainer:
+  {
+    justifyContent: 'center',
+    alignItems: 'center',
+    margin:15
+  },
+
+});
+
+
diff --git a/src/components/select_Location.js b/src/components/select_Location.js
new file mode 100644
index 0000000000000000000000000000000000000000..4b2e32b957095decb856c20e14a3ac5a5db6637f
--- /dev/null
+++ b/src/components/select_Location.js
@@ -0,0 +1,110 @@
+import React from 'react';
+import { StyleSheet, Text,TextInput,ProgressBarAndroid,TouchableOpacity,ScrollView,TouchableHighlight,Image,View } from 'react-native';
+import Icon from 'react-native-ionicons';
+import {Item, Input } from 'native-base';
+
+
+export default class select_Location extends React.Component {
+static navigationOptions = {
+       header: null,
+    };     
+ render() 
+ {
+   return(
+    <View>
+              <View style={styles.cartHeader}>
+                      <TouchableOpacity onPress={() => this.props.navigation.navigate('create_Activity')}>                  
+                           <Image
+                          style={styles.searchImg}
+                          source={require('.././images/back-arrow-white.png')} />
+                      </TouchableOpacity>
+                      <Text style={styles.profileText}>Select Location</Text>                                     
+              </View>
+              <View style={styles.contentBody}>
+                    <View style={{flexDirection:"row"}}>
+                        <Icon name='compass' size={22} color={'black'} />
+                        <Text style={styles.accHeaderText}>Detect Current Location</Text>
+                    </View>
+                    <Item regular style={styles.searchBar}>
+                        <Input placeholder="Search by Locality/ Venue Name" style={styles.searchText}/>
+                       
+                        <TouchableOpacity onPress={() => this.props.navigation.navigate('')}>
+                          <Image
+                          style={styles.searchImg}
+                          source={require('.././images/search-icon.png')} />
+                                        
+                        </TouchableOpacity >
+                    </Item>
+                    <Text style={styles.addressText}>Cafe Coffee Day- The Launge Road 12,Banjara hills,Hyderabad</Text>
+                    <Text style={styles.addressText}>Cream Shakes,Opposite to Ratnadeep Super Market,Road 12,Banjara Hills,Hyderabad</Text>
+                    <Text style={styles.addressText}>The Biryani Box,Sridha Anushka Pride,Road 12,Banjara Hills,Hyderabad</Text>
+
+              </View>
+                   
+    </View>
+     
+   );
+ }
+}
+const styles = StyleSheet.create({
+  cartHeader:
+  {
+    flexDirection:"row",
+    backgroundColor:"#33cbf6",
+    padding:15
+  },
+  profileText:
+  {
+    fontSize:20,
+    fontFamily:"TwCenMTStd",
+    color:"white",
+    marginLeft:10,
+    textAlignVertical:"center",
+  },
+  accHeaderText:
+  {
+    fontFamily:"TwCenMTStd",
+    fontSize:17,
+    color:"#363f4d",
+    marginLeft:5
+  },
+  contentBody:
+  {
+    padding:10
+  },
+  searchBar:
+  {
+    borderWidth:1,
+    borderColor:"#d7d7d7",
+    marginTop:20,
+    borderRadius:5
+  },
+  searchText:
+  {
+    fontSize:16,
+    color:"#999999",
+    fontFamily:"TwCenMTStd"
+  },
+  addressText:
+  {
+    fontSize:15,
+    textAlign:"left",
+    color:"#999999",
+    fontFamily:"TwCenMTStd",
+    borderColor: '#dadada',
+    borderBottomWidth: 1,
+    marginTop:15,
+    marginLeft:10,
+    marginRight:10,
+    paddingBottom:15
+
+  },
+  searchImg:
+  {
+    width:20,
+    height:20,
+    marginRight:10
+  }
+});
+
+
diff --git a/src/components/select_Sports.js b/src/components/select_Sports.js
new file mode 100644
index 0000000000000000000000000000000000000000..47cca571d383792bd9b64999e5125b03cb03bc35
--- /dev/null
+++ b/src/components/select_Sports.js
@@ -0,0 +1,66 @@
+import React from 'react';
+import { StyleSheet, Text,TextInput,TouchableOpacity,ScrollView,TouchableHighlight,Image,View } from 'react-native';
+import Icon from 'react-native-ionicons';
+
+
+export default class select_Sports extends React.Component {
+static navigationOptions = {
+       header: null,
+    };     
+ render() 
+ {
+   return(
+    <View>
+              <View style={styles.cartHeader}>
+                      <TouchableOpacity onPress={() => this.props.navigation.navigate('create_Activity')}>                  
+                           <Image
+                          style={styles.searchImg}
+                          source={require('.././images/back-arrow-white.png')} />
+                      </TouchableOpacity>
+                      <Text style={styles.profileText}>Select Sports</Text>                                     
+              </View>                
+    </View>
+     
+   );
+ }
+}
+const styles = StyleSheet.create({
+  cartHeader:
+  {
+    flexDirection:"row",
+    backgroundColor:"#33cbf6",
+    padding:15
+  },
+  profileText:
+  {
+    fontSize:20,
+    fontFamily:"TwCenMTStd",
+    color:"white",
+    marginLeft:10,
+    textAlignVertical:"center",
+  },
+  iconContainer:
+  {
+    justifyContent: 'center',
+    alignItems: 'center',
+    margin:15
+  },
+ searchImg:
+  {
+    width:20,
+    height:20,
+  },
+});
+
+
+var dataDump =[
+  {
+    "feedback": 
+    {
+      "subject":"Enter Subject",
+      "message":"Enter Message here minimum 150 characters",
+      
+    },
+  }
+
+]
\ No newline at end of file
diff --git a/src/components/select_Time.js b/src/components/select_Time.js
new file mode 100644
index 0000000000000000000000000000000000000000..5b7a7617b3e1826f002dc582161704d380d6cdb4
--- /dev/null
+++ b/src/components/select_Time.js
@@ -0,0 +1,50 @@
+import React from 'react';
+import { StyleSheet, Text,TextInput,ProgressBarAndroid,TouchableOpacity,ScrollView,TouchableHighlight,Image,View } from 'react-native';
+import Icon from 'react-native-ionicons';
+
+
+export default class select_Time extends React.Component {
+static navigationOptions = {
+       header: null,
+    };     
+ render() 
+ {
+   return(
+    <View>
+            <View style={styles.cartHeader}>
+                      <TouchableOpacity onPress={() => this.props.navigation.navigate('create_Activity')}>                  
+                          <View style={styles.iconContainer}>
+                                  <Icon name='arrow-back' size={22} color={'white'} />
+                          </View>
+                      </TouchableOpacity>
+                      <Text style={styles.profileText}>Select Time</Text>                                     
+              </View>                   
+    </View>
+     
+   );
+ }
+}
+const styles = StyleSheet.create({
+   cartHeader:
+ {
+    flexDirection:"row",
+    backgroundColor:"#33cbf6"
+  },
+  profileText:
+  {
+    fontSize:20,
+    fontFamily:"TwCenMTStd",
+    color:"white",
+    marginLeft:10,
+    textAlignVertical:"center",
+  },
+  iconContainer:
+  {
+    justifyContent: 'center',
+    alignItems: 'center',
+    margin:15
+  },
+
+});
+
+
diff --git a/src/components/signIn.js b/src/components/signIn.js
new file mode 100644
index 0000000000000000000000000000000000000000..ff9fb667529d42bcddb46cd35390f08928d9ea48
--- /dev/null
+++ b/src/components/signIn.js
@@ -0,0 +1,302 @@
+import React from 'react';
+import { StyleSheet, Text,TextInput,TouchableOpacity,ScrollView,FlatList,TouchableHighlight,Image,View, Switch,Keyboard} from 'react-native';
+import FormData from 'FormData';
+import Icon from 'react-native-ionicons';
+import {   Item, Picker  } from 'native-base';
+
+
+const ACCESS_TOKEN = 'access_token';
+
+export default class signIn extends React.Component {
+  static navigationOptions = {
+       header: null,
+    };
+    constructor(props) 
+    {
+    super(props);   
+    this.state = 
+      { 
+          showPassword: true,
+          mobileNumber: '', 
+          password:'',
+          deviceType:'android',
+          deviceToken:'Testing',
+          regType:'direct',
+          icEye: 'visibility-off', 
+          selected: "key1"
+        
+        }
+    }
+  changePwdType = () => {
+        let newState;
+        if (this.state.showPassword)
+         {
+            newState = 
+            {
+                icEye: 'visibility',
+                showPassword: false,
+                password: this.state.password
+            }
+        } else 
+        {
+            newState = 
+            {
+                icEye: 'visibility-off',
+                showPassword: true,
+                password: this.state.password
+            }
+        }
+        this.setState(newState)
+    };
+  handlePassword = (password) => 
+    {
+        let newState = {
+            icEye: this.state.icEye,
+            showPassword: this.state.showPassword,
+            password: password
+        }
+        this.setState(newState);
+    };
+     onValueChange(value: string) {
+    this.setState({
+      selected: value
+    });
+  }
+
+pwdHideAndShow() {
+    if (this.state.showPassword == false) {
+      return (
+        <Icon name='eye' size={24} color={'black'}  onPress={this.changePwdType}/>
+      )
+    } else if (this.state.showPassword == true) {
+      return (
+        <Icon name='eye-off' size={24} color={'black'}  onPress={this.changePwdType}/>
+
+      )
+    }
+  }
+  SignIn = () =>
+    {
+        let formData = new FormData();
+        formData.append('mobileNumber', this.state.mobileNumber);
+        formData.append('password', this.state.password);
+        formData.append('deviceType', this.state.deviceType);
+        formData.append('deviceToken', this.state.deviceToken);
+        formData.append('regType', this.state.regType);
+
+        let data = {
+            method: 'POST',
+            headers: {
+                'Accept': 'application/json',
+                "Content-Type": "multipart/form-data",
+            },
+            body: formData
+        }
+
+        fetch("http://testingmadesimple.org/playard/api/service/login", data)
+        .then(response => response.json())
+        .then(responseJson => 
+            {
+              if(responseJson.status == ("1"))
+              {
+                  alert("Login Successfully");                  
+                  this.props.navigation.navigate("Preffered_sports");
+                       this.setState({
+                                  mobileNumber: '',
+                                  password:'',
+                                 
+                                })       
+              }
+              else if(responseJson.status == ("0"))
+              {
+                alert("Fields are missing");
+              }
+              else if(responseJson.status == ("2"))
+              {
+                alert("Mobile Number doesn't exists");
+              }
+              else if(responseJson.status == ("3"))
+              {
+                alert("Wrong Password");
+              }
+              else
+              {
+                            // alert("Form not submitted");
+                            // this.props.navigation.navigate("Signup");
+              }
+              console.log('response:', responseJson)
+            }
+
+          )
+        .catch(error => console.error(error));
+        
+
+        console.log(data)
+        console.log(this.state)
+    }
+ 
+
+
+    
+
+ render() 
+ {
+   return(
+      <View style={{flex:1}}>
+               <ScrollView>
+                  <View style={styles.container}>
+                      <View style={{marginBottom:60}}>
+                            <Text style={styles.signInText}>SIGN IN WITH</Text>
+                            <Text style={styles.signInText}>YOUR</Text>
+                            <Text style={styles.signInText}>ACCOUNT</Text>
+                      </View>
+                      <View>
+                       
+                          <View style={styles.mobileWrapper}>
+                              <View style={styles.mobileText1}>                        
+                                  <Picker
+                                    note
+                                    mode="dropdown"                                   
+                                    selectedValue={this.state.selected}
+                                    onValueChange={this.onValueChange.bind(this)}>
+                                    <Picker.Item label="IND +91" value="key0" />
+                                    <Picker.Item label="IND +91" value="key1" />
+                                    <Picker.Item label="UK +44" value="key2" />                                   
+                                  </Picker>
+                              </View>
+                              <Text style={{width:"3%"}}></Text>
+                                <TextInput
+                                  placeholder="Mobile Number"
+                                  keyboardType={'phone-pad'}
+                                  style={styles.mobileText2}
+                                  maxLength={10}
+                                  onChangeText={(text) => this.setState({mobileNumber:text})}
+                                  value={this.state.mobileNumber}
+                                />
+                          </View>
+                          <View style={{flexDirection:"row"}}>
+                                 <TextInput
+                                    placeholder="Password"
+                                        placeholderTextColor="#A9A9A9" 
+
+                                    style={styles.passwordField}
+                                    secureTextEntry={this.state.showPassword}
+                                    value={this.state.password}
+                                    onChangeText={this.handlePassword}
+                                  /> 
+                                  <View style={styles.eyeView}>
+                                        <TouchableOpacity onPress={this.changePwdType.bind(this)}>{this.pwdHideAndShow()}
+                                    </TouchableOpacity>
+                                  </View> 
+                          </View>
+                          <TouchableOpacity onPress={() => this.props.navigation.navigate('forgotPassword')}>  
+                                  <Text style={styles.forgotText}>Forgot Password?</Text>
+                          </TouchableOpacity>                
+                          <View style={styles.signInBtn}>
+                                    <TouchableOpacity onPress={this.SignIn} >
+                                      <Text style={styles.signInBtnText}>SIGN IN</Text>
+                                    </TouchableOpacity>
+                          </View>                                                   
+                    </View>
+                </View>
+                </ScrollView>
+                <View style={styles.signInBtn2}>
+                    <View style={styles.loginWrapper}>
+                        <Text style={styles.signInBtnText2}>Not an Account?</Text>
+                        <TouchableOpacity onPress={() => this.props.navigation.navigate('signUp')}>
+                            <Text style={styles.signInBtnText2}>  Sign Up</Text>
+                        </TouchableOpacity>
+                    </View>                    
+                </View>
+      </View>
+
+   );
+ }
+}
+const styles = StyleSheet.create({
+  container: 
+  {
+    padding:30 
+  },
+  signInText:
+  {
+    fontSize:25,
+    color:"#363f4d",
+    fontFamily:"TwCenMTStd-Bold",
+  },
+  forgotText:
+  {
+    fontSize:18,
+    color:"#7f7f7f",
+    fontFamily:"TwCenMTStd",
+    marginTop:20,
+    marginBottom:40
+  },
+  mobileWrapper:
+  {
+    flexDirection:"row",
+    width:"100%",
+    marginBottom:20
+  },
+  mobileText1:
+  {
+    borderColor: '#dadada',
+    borderBottomWidth: 1,
+    fontSize:18,
+    fontFamily:"TwCenMTStd",
+    width:"40%",
+  },
+  mobileText2:
+  {
+    borderColor: '#dadada',
+    borderBottomWidth: 1,
+    fontSize:18,
+    width:"57%",
+    fontFamily:"TwCenMTStd",
+  }, 
+  passwordField:
+  {
+    borderColor: '#dadada',
+    fontSize:18,
+    borderBottomWidth: 1,
+    fontFamily:"TwCenMTStd",
+    width:"100%",
+    marginBottom:20
+  },
+  eyeView:
+  {
+    marginLeft:'auto',
+    marginTop:18,
+  },
+  signInBtn:
+  {   
+    backgroundColor:"#33cbf6",
+    borderRadius:5,
+  },
+  signInBtnText:
+  {
+    fontSize:20 ,
+    color:'#fff',
+    textAlign:"center",
+    padding:5,
+    fontFamily:"TwCenMTStd"
+  },
+  loginWrapper:
+  {
+    flexDirection:"row",
+    justifyContent:"center",
+    padding:15,
+  },
+  signInBtn2:
+  {  
+    backgroundColor:"#6740f2", 
+  },
+  signInBtnText2:
+  {
+    fontSize:16 ,
+    color:'#fff',
+    textAlign:"center",
+    fontFamily:"TwCenMTStd"
+  },
+  
+});
diff --git a/src/components/signUp.js b/src/components/signUp.js
new file mode 100644
index 0000000000000000000000000000000000000000..91a18d78fe6cef9bcdd1f20b9e0e64b61378b956
--- /dev/null
+++ b/src/components/signUp.js
@@ -0,0 +1,419 @@
+import React, {Component} from 'react';
+import { StyleSheet, Text,TextInput,TouchableOpacity,ScrollView,FlatList,TouchableHighlight,Image,View, Switch,Keyboard} from 'react-native';
+import { Item, Input } from 'native-base';
+import Icon from 'react-native-ionicons';
+import FormData from 'FormData';
+import Hr from "react-native-hr-component";
+import AsyncStorage from '@react-native-community/async-storage';
+import {    Picker  } from 'native-base';
+
+
+export default class signUp extends Component<Props> {
+  static navigationOptions = {
+       header: null,
+    };
+  constructor(props)
+  {
+    super(props);
+    this.SignUp = this.SignUp.bind(this);
+    this.state =
+            {
+              showPassword: true,
+              name: '',
+              mobileNumber: '',
+              email: '',
+              password:'',
+              deviceType:'android',
+              deviceToken:'Testing',
+              regType:'direct',
+              icEye: 'visibility-off',
+              selected: "key1"
+            };
+
+  }
+  changePwdType = () => {
+        let newState;
+        if (this.state.showPassword)
+         {
+            newState =
+            {
+                icEye: 'visibility',
+                showPassword: false,
+                password: this.state.password
+            }
+        } else
+        {
+            newState =
+            {
+                icEye: 'visibility-off',
+                showPassword: true,
+                password: this.state.password
+            }
+        }
+        this.setState(newState)
+    };
+  handlePassword = (password) =>
+    {
+        let newState = {
+            icEye: this.state.icEye,
+            showPassword: this.state.showPassword,
+            password: password
+        }
+        this.setState(newState);
+    };
+
+    pwdHideAndShow() {
+    if (this.state.showPassword == false) {
+      return (
+        <Icon name='eye' size={24} color={'black'}  onPress={this.changePwdType}/>
+      )
+    } else if (this.state.showPassword == true) {
+      return (
+        <Icon name='eye-off' size={24} color={'black'}  onPress={this.changePwdType}/>
+
+      )
+    }
+  }
+  onValueChange(value: string) {
+    this.setState({
+      selected: value
+    });
+  }
+
+
+  SignUp = async () =>
+    {
+
+        await AsyncStorage.setItem('@storage_Key',this.state.mobileNumber)
+        console.log(this.state.mobileNumber);
+
+        const {name,email,mobileNumber,password} = this.state;
+        let reg = /^[a-zA-Z0-9 ](_(?!(\.|_))|\.(?!(_|\.))|[a-zA-Z0-9 ]){3,76}[a-zA-Z0-9 ]*$/;
+        let reg1 = /^(\+\d{1,3}[- ]?)?\d{10}$/;
+        let reg2 = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
+        let reg3 = /^.*(?=.{6,20})(?=.*[a-zA-Z])(?=.*\d)[a-zA-Z0-9!@#$%]+$/
+
+        if(name=="")
+        {
+          this.setState({field:'Please enter Name'})
+        }
+        else if(reg.test(name) === false)
+        {
+            this.setState({field:':#?@&%/ are not allowed and should enter 3-76 characters in the name'})
+            return false;
+        }
+
+        else if(mobileNumber=="")
+        {
+          this.setState({field:'Please enter Mobile Number'})
+        }
+        else if(reg1.test(mobileNumber) === false)
+        {
+            this.setState({field:'Mobile Number should contain 10 digits'})
+            return false;
+        }
+        else if(email=="")
+        {
+          this.setState({field:'Please enter Email Id'})
+        }
+        else if(reg2.test(email) === false)
+        {
+            this.setState({field:'Please enter valid Email Id'})
+            return false;
+        }
+        else if(password=="")
+        {
+          this.setState({field:'Please enter Password'})
+        }
+        else if(reg3.test(password) === false)
+        {
+            this.setState({field:'Password should contain at least one numeric digit,one alphabet and length of 6-20'})
+            return false;
+        }
+
+        else
+        {
+          this.setState({field:''})
+        }
+              let formData = new FormData();
+              formData.append('name', this.state.name);
+              formData.append('mobileNumber', this.state.mobileNumber);
+              formData.append('email', this.state.email);
+              formData.append('password', this.state.password);
+              formData.append('deviceType', this.state.deviceType);
+              formData.append('deviceToken', this.state.deviceToken);
+              formData.append('regType', this.state.regType);
+              let data = {
+                  method: 'POST',
+                  headers: {
+                      'Accept': 'application/json',
+                      "Content-Type": "multipart/form-data",
+                  },
+                  body: formData
+              }
+              fetch("http://testingmadesimple.org/playard/api/service/signup", data)
+              .then(response => response.json())
+              .then(responseJson =>
+               { if(responseJson.status == ("1"))
+                         {
+                            console.log('number is',mobileNumber)
+                            this.props.navigation.navigate("Otp");
+                            this.setState({
+                                  name: '',
+                                  mobileNumber: '',
+                                  email: '',
+                                  password:'',
+
+                                })
+                          }
+
+                          else if(responseJson.status == ("2"))
+                          {
+                              alert("Failed");
+                          }
+                          else if(responseJson.status == ("3"))
+                          {
+                              alert("Mobile number already exists,Please try with another");
+                          }
+                          else if(responseJson.status == ("4"))
+                          {
+                              alert("Email Id already exists with us");
+                          }
+                          else{
+                            // alert("Form not submitted");
+                            // this.props.navigation.navigate("Signup");
+                          }
+                         console.log('response:', responseJson)
+                }
+
+              )
+
+              .catch(error => console.error(error));
+              console.log(data)
+
+
+    }
+
+  render() {
+    return (
+
+        <View style={{flex:1}}>
+               <ScrollView>
+                  <View style={styles.container}>
+                      <View style={{marginBottom:20}}>
+                            <Text style={styles.signInText}>SIGN UP WITH</Text>
+                            <Text style={styles.signInText}>YOUR</Text>
+                            <Text style={styles.signInText}>ACCOUNT</Text>
+                      </View>
+                      <View>
+                          <TextInput
+                            placeholder="Name"
+                            style={styles.inputField}
+                            onChangeText={(text) => this.setState({name:text})}
+                            value={this.state.name}
+                            returnKeyType = { "next" }
+                            onSubmitEditing={() => { this.mobileNumber.focus(); }}
+                            blurOnSubmit={false}
+                          />
+                          <View style={styles.mobileWrapper}>
+                              <View style={styles.mobileText1}>
+                                  <Picker
+                                    note
+                                    mode="dropdown"
+
+                                    selectedValue={this.state.selected}
+                                    onValueChange={this.onValueChange.bind(this)}
+                                  >
+                                    <Picker.Item label="IND +91" value="key0" />
+                                    <Picker.Item label="IND +91" value="key1" />
+                                    <Picker.Item label="UK +44" value="key2" />
+
+                                  </Picker>
+                              </View>
+                                <Text style={{width:"3%"}}></Text>
+                                <TextInput
+                                  placeholder="Mobile Number"
+                                  keyboardType={'phone-pad'}
+                                  style={styles.mobileText2}
+                                  maxLength={10}
+                                  onChangeText={(text) => this.setState({mobileNumber:text})}
+                                  value={this.state.mobileNumber}
+                                  ref={(input) => { this.mobileNumber = input; }}
+                                  returnKeyType = { "next" }
+                                  onSubmitEditing={() => { this.email.focus(); }}
+                                  blurOnSubmit={false}
+                                />
+
+
+                          </View>
+                          <TextInput
+                                placeholder="Email ID"
+                                style={styles.inputField}
+                                onChangeText={(text) => this.setState({email:text})}
+                                value={this.state.email}
+                                ref={(input) => { this.email = input; }}
+                                returnKeyType = { "next" }
+                                onSubmitEditing={() => { this.password.focus(); }}
+                                blurOnSubmit={false}
+                          />
+                          <View style={{flexDirection:"row"}}>
+                                 <TextInput
+                                    placeholder="Password"
+                                    style={styles.passwordField}
+                                    secureTextEntry={this.state.showPassword}
+                                    value={this.state.password}
+                                    onChangeText={this.handlePassword}
+                                    ref={(input) => { this.password = input; }}
+                                  />
+                                  <View style={styles.eyeView}>
+                                    <TouchableOpacity onPress={this.changePwdType.bind(this)}>{this.pwdHideAndShow()}
+                                    </TouchableOpacity>
+
+                                  </View>
+                          </View>
+                        <Text style={styles.errorText}>{this.state.field}</Text>
+                        <View style={styles.signInBtn}>
+                                  <TouchableOpacity onPress={this.SignUp} >
+                                    <Text style={styles.signInBtnText}>SIGN UP</Text>
+                                  </TouchableOpacity>
+                        </View>
+                        <View style={styles.confirmWrapper}>
+                              <Hr lineColor="#ddd" width={1} text="OR" textStyles={{fontFamily:"TwCenMTStd",fontSize:16,color:"#363f4d",marginLeft:5,marginRight:5}}  />
+                        </View>
+
+
+                        <View style={{flexDirection:"row",justifyContent:"center"}}>
+                            <View style={{margin:10}}>
+                                <Icon name="logo-facebook"
+                                  Icon size={60} type='font-awesome' color='#3C5A99'
+                                />
+                            </View>
+                            <View style={{margin:10}}>
+                                <Icon name="logo-google"
+                                  Icon size={60} type='font-awesome' color='#DD4B39'
+                                />
+                            </View>
+                        </View>
+                    </View>
+                </View>
+
+
+                <View style={styles.signInBtn2}>
+                    <View style={styles.loginWrapper}>
+                        <Text style={styles.signInBtnText2}>Already have an Account?</Text>
+                        <TouchableOpacity onPress={() => this.props.navigation.navigate('signIn')}>
+                            <Text style={styles.signInBtnText2}>  Login</Text>
+                        </TouchableOpacity>
+                    </View>
+                </View>
+                  </ScrollView>
+
+      </View>
+
+
+    );
+  }
+}
+
+const styles = StyleSheet.create({
+  container:
+  {
+    padding:30
+  },
+inputField:
+  {
+    borderColor: '#dadada',
+    fontSize:18,
+    borderBottomWidth: 1,
+    fontFamily:"TwCenMTStd",
+    marginBottom:10
+  },
+errorText:
+  {
+    marginLeft:'auto',
+    marginRight:20,
+    color:"red",
+    fontFamily:'TwCenMTStd'
+  },
+  signInText:
+  {
+    fontSize:25,
+    color:"#363f4d",
+    fontFamily:"TwCenMTStd-Bold",
+  },
+  mobileWrapper:
+  {
+    flexDirection:"row",
+    width:"100%",
+    marginBottom:10
+  },
+ mobileText1:
+  {
+    borderColor: '#dadada',
+    fontSize:18,
+    borderBottomWidth: 1,
+    fontFamily:"TwCenMTStd",
+    width:"40%",
+  },
+
+  mobileText2:
+  {
+    borderColor: '#dadada',
+    fontSize:18,
+    borderBottomWidth: 1,
+    fontFamily:"TwCenMTStd",
+    width:"57%",
+
+  },
+  passwordField:
+  {
+    borderColor: '#dadada',
+    fontSize:18,
+    borderBottomWidth: 1,
+    fontFamily:"TwCenMTStd",
+    width:"100%",
+    marginBottom:20
+  },
+
+  eyeView:
+  {
+    marginLeft:'auto',
+    marginTop:18,
+  },
+  signInBtn:
+  {
+    backgroundColor:"#33cbf6",
+    borderRadius:5,
+    marginTop:20,
+    marginBottom:20
+  },
+  signInBtnText:
+  {
+    fontSize:20 ,
+    color:'#fff',
+    textAlign:"center",
+    padding:5,
+    fontFamily:"TwCenMTStd"
+  },
+  loginWrapper:
+  {
+    flexDirection:"row",
+    justifyContent:"center",
+    padding:15,
+
+  alignItems:'center',
+
+  },
+  signInBtn2:
+  {
+    backgroundColor:"#7e5bef",
+  },
+  signInBtnText2:
+  {
+    fontSize:16 ,
+    color:'#fff',
+    textAlign:"center",
+    fontFamily:"TwCenMTStd",
+    bottom : 0,
+  },
+});
